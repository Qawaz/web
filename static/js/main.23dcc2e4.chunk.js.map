{"version":3,"sources":["model/SyncFile.js","ui/components/Content.tsx","model/Reminder.ts","model/Note.ts","model/MindMap.ts","model/Tag.ts","model/Category.ts","utils/ReminderHelper.ts","model/database/AppDatabase.ts","model/database/NoteDao.ts","model/database/MindMapDao.ts","ui/Themes.ts","store/AppStateProvider.tsx","ui/screens/NoteEditor/EditorTheme.ts","utils/Helpers.ts","store/StorageProvider.tsx","utils/DateTimeFormatter.ts","ui/icons/PinFilledIcon.tsx","ui/icons/PinIcon.tsx","ui/components/MainItem/MainCard/MainCard.tsx","utils/MainItemHelper.ts","ui/components/commons/StaggeredGrid/StaggeredGridModel.ts","ui/components/commons/StaggeredGrid/StaggeredGridContext.tsx","ui/components/commons/StaggeredGrid/StaggeredGrid.tsx","ui/components/commons/StaggeredGrid/StaggeredGridItem.tsx","ui/components/commons/BaseSelectionBar.tsx","ui/components/MainItem/MainSelectionBar.tsx","model/database/TagDao.ts","ui/components/tags/TagItemMenu.tsx","ui/components/dialogs/TagDialog.tsx","ui/components/tags/TagSelectionBar.tsx","utils/useLongPress.ts","ui/components/tags/TagsListItem.tsx","ui/components/tags/TagsList.tsx","ui/components/EmptyList.tsx","ui/screens/Tags.tsx","ui/components/tags/TagCreator.tsx","ui/components/dialogs/TagSelectionDialog.tsx","model/database/CategoryDao.ts","ui/screens/Categories.tsx","ui/components/dialogs/CategorySelectionDialog.tsx","ui/components/dialogs/ColorDialog.tsx","ui/components/MainItem/MainList.tsx","ui/components/commons/CreateFab.tsx","ui/screens/Main.tsx","store/UserProvider.tsx","utils/FirebaseHelper.ts","utils/DriveHelper.ts","model/database/ReminderDao.ts","model/database/AttachmentDao.ts","utils/SyncHelper.ts","utils/AuthHelper.ts","ui/components/Header.tsx","ui/components/SideDrawer.tsx","ui/components/Container.tsx","ui/screens/NoteEditor/NoteEditor.tsx","ui/components/dialogs/ReminderIntervalDialog.tsx","ui/components/dialogs/ReminderDialog.tsx","ui/components/reminders/RemindersListItem.tsx","ui/components/reminders/ReminderSelectionBar.tsx","ui/components/reminders/ReminderItemMenu.tsx","ui/components/reminders/RemindersList.tsx","ui/screens/Reminders.tsx","ui/screens/Trash.tsx","ui/screens/Archive.tsx","ui/components/dialogs/SettingsDialog.tsx","ui/components/dialogs/AccountDialog.tsx","App.tsx","index.tsx"],"names":["Object","defineProperty","exports","value","SyncFileType","useStyles","makeStyles","theme","toolbar","mixins","content","flexGrow","Content","props","classes","className","children","RepeatInterval","Note","archived","attachments","categoryId","cloudId","colorIndex","createdDate","Date","now","deleted","deletedDate","editedDate","id","permanentlyDeleted","pinned","reminderId","tags","text","title","MindMap","description","this","Tag","name","Category","getNextRepeatTime","reminder","reminderTime","time","reminderDate","repeat","intervalType","Hour","setHours","getHours","intervalNumber","Day","setDate","getDate","Week","Month","setMonth","getMonth","Year","setFullYear","getFullYear","getNextRingingTime","lastTimeFired","nextTime","forever","untilDate","untilEvents","firedTimes","sortRemindersList","reminders","start","end","length","i","s","getReminderDateTimeString","format","getReminderRepeatString","str","toLowerCase","weekDays","map","day","toUpperCase","substring","join","sameMonthDay","toString","Reminder","isSticky","markedDone","db","Dexie","timelineItem","getFileFromDb","file","type","notes","where","equals","first","mindmaps","categories","AttachmentRecord","console","warn","e","log","DeleteFileFromDb","delete","catch","getAllNotes","a","toArray","AddNoteIntoDb","item","add","UpdateNoteIntoDb","put","version","stores","mapToClass","getAllMindMaps","AddMindMapIntoDb","UpdateMindMapIntoDb","ThemeType","raleway","notoSans","commonTheme","typography","h1","fontFamily","h2","h3","h4","h5","light","palette","primary","main","dark","secondary","defaultState","themeType","Light","setThemeType","drawerOpen","setDrawerOpen","open","settingsOpen","setSettingsOpen","accountOpen","setAccountOpen","AppStateContext","React","createContext","AppStateProvider","Provider","state","Dark","useAppState","context","useContext","Error","colors","almostBlack","lightBlack","almostWhite","white","white10","black","black10","greyLight","grey","greyMid","greyDark","editorBase","fontFamilyMono","fontWeight","zIndex","link","placeholder","textSecondary","textLight","textHighlight","textHighlightForeground","selected","codeComment","codePunctuation","codeNumber","codeProperty","codeTag","codeString","codeSelector","codeAttr","codeEntity","codeKeyword","codeFunction","codeStatement","codePlaceholder","codeInserted","codeImportant","blockToolbarBackground","blockToolbarTrigger","blockToolbarTriggerIcon","blockToolbarItem","blockToolbarIcon","undefined","blockToolbarIconSelected","blockToolbarText","blockToolbarTextSelected","blockToolbarHoverBackground","blockToolbarDivider","noticeInfoBackground","noticeInfoText","noticeTipBackground","noticeTipText","noticeWarningBackground","noticeWarningText","editorLight","background","code","cursor","divider","toolbarBackground","toolbarHoverBackground","toolbarInput","toolbarItem","tableDivider","tableSelected","tableSelectedBackground","quote","codeBackground","codeBorder","horizontalRule","imageErrorBackground","scrollbarBackground","scrollbarThumb","editorDark","getNextId","items","forEach","lightColorsList","darkColorsList","getColorForIndex","index","defaultStorage","initNotes","initCategories","initMindMaps","initReminders","initTags","StorageContext","StorageProvider","storage","useStorage","formatDate","date","withYear","d","ye","Intl","DateTimeFormat","year","mo","month","da","PinFilledIcon","SvgIcon","PinIcon","createStyles","root","maxWidth","selectedCard","boxShadow","border","menuIcon","marginLeft","cardActionArea","display","flexDirection","opacity","transition","cardIconBtn","padding","cardFooter","margin","chipContainer","cardChip","footerText","color","fontSize","flexWrap","justifyContent","dateText","MainCard","openOnClick","history","useHistory","itemCategory","useMemo","c","find","cat","itemTags","t","tagId","tag","push","cardStyles","Card","isSelected","variant","style","IconButton","onClick","onSelectDeselect","CloseOutlined","CheckCircle","CardActionArea","CardContent","Typography","gutterBottom","onChange","readOnly","defaultValue","Chip","label","CardActions","disableSpacing","aria-label","size","onPinUnpin","onColor","PaletteOutlined","onArchiveUnarchive","UnarchiveOutlined","ArchiveOutlined","onTag","LabelOutlined","onCategorize","CategoryOutlined","onMenuOpen","currentTarget","SectionItem","filterItems","filter","isArchived","isPinned","isDeleted","isPermanentlyDeleted","StaggeredItemSpan","StaggeredAlignment","gridWidth","gridHeight","colWidth","recalculate","itemAdded","itemColumnSpan","getWidth","getHeight","update","itemRemoved","itemUpdated","StaggeredGridContext","StaggeredGrid","gridItems","gridElementRef","getColsCount","count","Math","ceil","columnWidth","Infinity","reposition","document","readyState","rowWidth","colNumber","columnCount","colsHeight","Array","fill","rowOffset","alignment","Center","End","x","y","itemWidth","Single","Full","itemHeight","getItemHeight","largeHeight","height","error","refresh","clientWidth","clientHeight","setState","window","addEventListener","removeEventListener","prevProps","prevState","snapshot","getItemWidth","splice","ref","element","position","render","Component","defaultProps","StaggeredGridItem","translateX","translateY","itemElementRef","updateTranslate","width","reportData","spans","transform","overflowX","contextType","appBar","breakpoints","up","default","menuButton","selectionTitle","rightContainer","BaseSelectionBar","isVisible","AppBar","Toolbar","edge","onClose","Close","noWrap","MainSelectionBar","checked","setChecked","showPinUnpin","onPinUnPin","showArchiveUnArchive","onArchiveUnArchive","showTag","showCategory","onDelete","DeleteOutline","getAllTags","AddTagIntoDb","UpdateTagIntoDb","useTagMenuStyles","menuItem","TagItemMenu","Menu","Boolean","anchorEl","onMenuClose","MenuItem","onItemSelect","onShowTagDialog","deleteTag","then","TagDialog","useState","tagName","setTagName","useEffect","Dialog","setOpen","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","fullWidth","DialogActions","Button","TagSelectionBar","preventDefault","isTouchEvent","touches","useLongPress","onLongPress","delay","shouldPreventDefault","longPressTriggered","setLongPressTriggered","timeout","useRef","target","useCallback","persist","clonedEvent","passive","current","setTimeout","clear","shouldTriggerClick","clearTimeout","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","TagsListItem","Fragment","isSelectionMode","ListItemIcon","Checkbox","tabIndex","disableRipple","ListItemText","ListItemSecondaryAction","marginRight","onShowTagMenu","tagsList","backgroundColor","paper","TagsList","tagDialogOpen","setTagDialogOpen","currentTag","setCurrentTag","tagMenuAnchor","setTagMenuAnchor","toggleCheckItem","idIndex","indexOf","newChecked","longPressEvent","parseInt","getAttribute","trim","EmptyListComponent","List","ListItem","tagid","dense","button","findIndex","checkedId","emptyContainer","alignItems","emptyContent","top","hourGlass","EmptyList","HourglassEmpty","message","Tags","TagCreator","createTag","newTag","useCreatorStyles","creatorRow","creatorIcon","tagInput","creatorBtn","Icon","InputBase","Check","TagSelectionDialog","isOpen","selectedTags","onSelectionChange","handleToggle","currentIndex","labelId","role","inputProps","getAllCategories","AddCategoryIntoDb","UpdateCategoryIntoDb","categoriesList","Categories","cid","checkedArr","CategoryCreator","category","catid","ChevronRight","EditOutlined","categoryInput","categoryName","setCategoryName","newCategory","CategorySelectionDialog","activeCategory","selectedCategory","setSelectedCategory","Radio","colorRow","colorNode","borderRadius","activeColor","ColorDialog","colorsList","activeColorIndex","setColorIndex","itemGrid","itemCard","sectionItem","MainList","colorDialog","setColorDialog","tagSelectionDialog","setTagSelectionDialog","categorySelectionDialog","setCategorySelectionDialog","mainFilter","filters","list","sort","item1","item2","sectionedList","filteredList","getSectionedList","anchorMenu","setAnchorMenu","actionItem","setActionItem","actionItemTags","setActionItemTags","actionItemCategory","setActionItemCategory","updateList","updateListFor","toggleItem","itemKey","archiveUnarchiveItem","pinUnpinItem","removeItem","updateItem","affected","getAffected","keepMounted","Share","restoreItem","RestoreOutlined","speedDial","bottom","spacing","right","actions","icon","to","marginTop","MapOutlined","NoteAddOutlined","CreateFab","hidden","handleClose","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","action","SpeedDialAction","tooltipTitle","tooltipOpen","Main","defaultUser","user","setUser","UserContext","UserProvider","useUser","auth","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getAnalytics","getAuth","firebaseSignOut","signOut","useDeviceLanguage","convertToSyncFile","obj","properties","resolveType","createdTime","modifiedTime","deletedTime","getFilesList","gapi","client","drive","files","response","result","getFileFromCloud","get","fileId","alt","resp","uploadJsonToCloud","syncFile","json","fileData","resource","mimeType","media","mediaType","body","fields","parents","create","getAllReminders","AddReminderIntoDb","UpdateReminderIntoDb","AddAttachmentIntoDb","UpdateAttachmentIntoDb","Attachment","Unknown","convertItemToSyncFile","itemType","itemName","isPresent","isUpdated","data","filesList","uploadItems","JSON","stringify","itemId","DISCOVERY_DOCS","onSignInStateChange","isSignedIn","auth2","getAuthInstance","authResponse","currentUser","getAuthResponse","idToken","id_token","accessToken","access_token","signInWithCredential","GoogleAuthProvider","credential","startDownloadSync","initClient","init","clientId","discoveryDocs","scope","listen","search","shape","fade","common","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","transitions","loginButton","textTransform","profileImage","appBarContainer","Header","setAnchorEl","anchorMainEl","setAnchorMainEl","Search","input","ThemeToggle","aria-controls","aria-haspopup","event","Avatar","src","photoURL","displayName","signIn","Brightness7","Brightness4","drawer","flexShrink","drawerPaper","sectionTitle","navLink","textDecoration","activeNavLink","getContrastText","SideDrawer","useTheme","exact","activeClassName","Dashboard","Notifications","Archive","Delete","Label","Hidden","smUp","implementation","Drawer","anchor","direction","ModalProps","xsDown","Container","classProp","CssBaseline","editorContainer","noteEditor","noteTitle","outline","NoteEditor","useParams","note","setNote","setNoteTitle","getNoteById","n","startUploadSync","r","ArrowBack","getValue","formControl","formRow","formRowMargin","marginContainer","centerText","textAlign","buttonsContainer","flexFlow","daysContainer","dayBtn","dayItem","lineHeight","dayItemText","selectedDayItem","monthContainer","monthRow","ReminderIntervalDialog","setIntervalType","setIntervalNumber","until","setUntil","reminderDays","setReminderDays","sameDay","setSameDay","untilDateDialog","setUntilDateDialog","setUntilDate","setUntilEvents","initFromReminder","FormControl","Select","renderValue","newDays","utils","DateFnsUtils","DateTimePicker","disablePast","getTime","TextFieldComponent","ReminderDialog","reminderName","setReminderName","reminderDesc","setReminderDesc","ringsDate","setRingsDate","reminderRings","setReminderRings","reminderRepeats","setReminderRepeats","ringsDateDialog","setRingsDateDialog","intervalDialog","setIntervalDialog","initRepeatFromReminder","noValidate","autoComplete","val","reminderText","RemindersListItem","NotificationsOutlined","onShowMenu","ReminderSelectionBar","ReminderItemMenu","onShowReminderDialog","removeReminder","remindersList","RemindersList","rem","reminderDialogOpen","setReminderDialogOpen","currentReminder","setCurrentReminder","reminderMenuAnchor","setReminderMenuAnchor","reminderid","reminderFab","Reminders","reminderDialog","setReminderDialog","Fab","Trash","setting","SettingsDialog","fullScreen","useMediaQuery","down","Switch","flex","container","userContainer","infoContainer","userPhoto","userEmail","optionsContainer","Transition","forwardRef","Slide","AccountDialog","TransitionComponent","email","App","getSavedTheme","saved","Cookies","appState","setupGapi","script","createElement","setAttribute","onload","load","exception","appendChild","set","mindmap","reverse","callback","onAuthStateChanged","createMuiTheme","ThemeProvider","path","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.23dcc2e4.chunk.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SyncFileType = void 0;\r\nvar SyncFileType;\r\n(function (SyncFileType) {\r\n    SyncFileType[\"Note\"] = \"Note\";\r\n    SyncFileType[\"MindMap\"] = \"MindMap\";\r\n    SyncFileType[\"Reminder\"] = \"Reminder\";\r\n    SyncFileType[\"Tag\"] = \"Tag\";\r\n    SyncFileType[\"Category\"] = \"Category\";\r\n    SyncFileType[\"Attachment\"] = \"Attachment\";\r\n    SyncFileType[\"AttachmentRecord\"] = \"AttachmentRecord\";\r\n    SyncFileType[\"Unknown\"] = \"Unknown\";\r\n})(SyncFileType = exports.SyncFileType || (exports.SyncFileType = {}));\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function Content(props: any) {\r\n    const classes = useStyles();\r\n    return (\r\n        <main className={classes.content}>\r\n            <div className={classes.toolbar}/>\r\n            {props.children}\r\n        </main>\r\n    );\r\n}\r\n","import {TimelineItem} from \"./TimelineItem\";\r\nimport {getWeekdays} from \"../utils/ReminderHelper\";\r\n\r\nexport enum RepeatInterval {\r\n    Hour = \"Hour\",\r\n    Day = \"Day\",\r\n    Week = \"Week\",\r\n    Month = \"Month\",\r\n    Year = \"Year\"\r\n}\r\n\r\nexport class Reminder implements TimelineItem {\r\n    createdDate: number = Date.now();\r\n    deleted: boolean = false;\r\n    editedDate: number = Date.now();\r\n    deletedDate: number | null = null;\r\n    id: number | null = null;\r\n    cloudId: string | null = null;\r\n    name: string = \"\";\r\n    time: number = Date.now();\r\n    description: string = \"\"\r\n    isSticky: boolean = false\r\n    lastTimeFired: number = -1\r\n    firedTimes: number = 0\r\n    markedDone: boolean = false\r\n\r\n    //Repeat Properties\r\n    repeat: boolean = false\r\n    intervalType: RepeatInterval = RepeatInterval.Day\r\n\r\n    //for day\r\n    intervalNumber: number = 1\r\n\r\n    //for week\r\n    weekDays: Array<string> = getWeekdays()\r\n\r\n    //for month\r\n    sameMonthDay: boolean = false\r\n\r\n    forever: boolean = true\r\n    untilDate: number | null = null\r\n    untilEvents: number | null = null\r\n}\r\n","import {TimelineItem} from \"./TimelineItem\";\r\n\r\nexport class Note implements TimelineItem {\r\n    archived: boolean = false;\r\n    attachments: any[] = [];\r\n    categoryId: number = -1;\r\n    cloudId: string | null = null;\r\n    colorIndex: number = -1;\r\n    createdDate: number = Date.now();\r\n    deleted: boolean = false;\r\n    deletedDate: number | null = null;\r\n    editedDate: number = Date.now();\r\n    id: number | null = null;\r\n    permanentlyDeleted: boolean = false;\r\n    pinned: boolean = false;\r\n    reminderId: number = -1;\r\n    tags: number[] = [];\r\n    text: string = \"\";\r\n    title: string = \"\";\r\n}\r\n","import {TimelineItem} from \"./TimelineItem\";\r\n\r\nexport class MindMap implements TimelineItem {\r\n    archived: boolean = false;\r\n    attachments: number[] = []\r\n    categoryId: number = -1\r\n    cloudId: string | null = null;\r\n    colorIndex: number = 0;\r\n    content: string = \"\";\r\n    createdDate: number = Date.now()\r\n    deleted: boolean = false;\r\n    deletedDate: number | null = null;\r\n    description: string = \"\";\r\n    editedDate: number = Date.now();\r\n    id: number | null = null;\r\n    permanentlyDeleted: boolean = false;\r\n    pinned: boolean = false;\r\n    reminderId: number = -1;\r\n    tags: number[] = [];\r\n    text: string = \"\";\r\n    title: string = \"\";\r\n\r\n\r\n    constructor(content: string, id: number, text: string, title: string) {\r\n        this.content = content;\r\n        this.id = id;\r\n        this.text = text;\r\n        this.title = title;\r\n    }\r\n}\r\n","import {TimelineItem} from \"./TimelineItem\";\r\n\r\nexport class Tag implements TimelineItem {\r\n    createdDate: number = Date.now();\r\n    deleted: boolean = false;\r\n    deletedDate: number | null = null;\r\n    editedDate: number = Date.now();\r\n    id: number | null = null;\r\n    name: string = \"\";\r\n    cloudId: string | null = null;\r\n\r\n    constructor(name: string) {\r\n        this.name = name\r\n    }\r\n}\r\n","import {TimelineItem} from \"./TimelineItem\";\r\n\r\nexport class Category implements TimelineItem {\r\n    createdDate: number = Date.now();\r\n    deleted: boolean = false;\r\n    deletedDate: number | null = null;\r\n    editedDate: number = Date.now();\r\n    id: number | null = null;\r\n    name: string = \"\";\r\n    cloudId: string | null = null;\r\n\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import {Reminder, RepeatInterval} from \"../model/Reminder\";\r\nimport {format} from \"date-fns\";\r\n\r\nexport function getWeekdays() {\r\n    return [\r\n        \"monday\",\r\n        \"tuesday\",\r\n        \"wednesday\",\r\n        \"thursday\",\r\n        \"friday\",\r\n        \"saturday\",\r\n        \"sunday\"\r\n    ]\r\n}\r\n\r\nfunction getNextRepeatTime(reminder: Reminder): number {\r\n    let reminderTime = reminder.time\r\n    let reminderDate = new Date(reminder.time)\r\n    if (reminder.repeat) {\r\n        switch (reminder.intervalType) {\r\n            case RepeatInterval.Hour:\r\n                reminderTime = reminderDate.setHours(reminderDate.getHours() + reminder.intervalNumber)\r\n                break;\r\n            case RepeatInterval.Day:\r\n                reminderTime = reminderDate.setDate(reminderDate.getDate() + reminder.intervalNumber)\r\n                break;\r\n            case RepeatInterval.Week:\r\n                reminderTime = reminderDate.setDate(reminderDate.getDate() + (reminder.intervalNumber * 7))\r\n                break;\r\n            case RepeatInterval.Month:\r\n                reminderTime = reminderDate.setMonth(reminderDate.getMonth() + reminder.intervalNumber)\r\n                break;\r\n            case RepeatInterval.Year:\r\n                reminderTime = reminderDate.setFullYear(reminderDate.getFullYear() + reminder.intervalNumber)\r\n                break;\r\n        }\r\n    }\r\n    return reminderTime\r\n}\r\n\r\n/**\r\n * Return calculated next ringing time of reminder from its interval/repeat properties\r\n * @param reminder\r\n */\r\nexport function getNextRingingTime(reminder: Reminder): number {\r\n    if (reminder.repeat) {\r\n        if (reminder.lastTimeFired > 0 && reminder.time < Date.now()) {\r\n            let nextTime = reminder.time\r\n            if (reminder.forever) {\r\n                nextTime = getNextRepeatTime(reminder)\r\n            } else if (reminder.untilDate != null && reminder.untilDate!! > Date.now()) {\r\n                nextTime = getNextRepeatTime(reminder)\r\n            } else if (reminder.untilEvents != null && reminder.firedTimes > reminder.untilEvents!!) {\r\n                nextTime = getNextRepeatTime(reminder)\r\n            }\r\n            return nextTime\r\n        } else {\r\n            return reminder.time\r\n        }\r\n    } else {\r\n        return reminder.time\r\n    }\r\n}\r\n\r\n/**\r\n * Sort reminder list on the basis of reminders next firing time\r\n */\r\nexport function sortRemindersList(reminders: Array<Reminder>): Array<Reminder> {\r\n    let start = 0\r\n    let end = reminders.length\r\n\r\n    if (start > end) {\r\n        for (let i = start; i < end; i++) {\r\n            if (getNextRingingTime(reminders[start]) < getNextRingingTime(reminders[end - 1])) {\r\n                let s = reminders[start]\r\n                reminders[start] = reminders[end]\r\n                reminders[end] = s\r\n            }\r\n            start++\r\n            end--\r\n        }\r\n    }\r\n\r\n    return reminders\r\n}\r\n\r\n/**\r\n * Returns reminder date time string , eg : Rings tomorrow 6 AM\r\n * @param reminder\r\n */\r\nexport function getReminderDateTimeString(reminder: Reminder): string {\r\n    return format(new Date(getNextRingingTime(reminder)), \"p PP\")\r\n}\r\n\r\n/**\r\n * Returns repeat string , eg : Repeats every 6 days\r\n * @param reminder\r\n */\r\nexport function getReminderRepeatString(reminder: Reminder): string {\r\n    if (reminder.repeat) {\r\n        let str = \"repeats every \"\r\n        if (reminder.intervalNumber > 1) {\r\n            str += reminder.intervalNumber + \" \" + reminder.intervalType.toLowerCase() + \"s \"\r\n        } else {\r\n            str += reminder.intervalType.toLowerCase() + \" \"\r\n        }\r\n        if (reminder.intervalType === RepeatInterval.Week) {\r\n            str += \"on \"\r\n            str += reminder.weekDays.map(day => day[0].toUpperCase() + day.substring(1, 3)).join(',') + \" \"\r\n        }\r\n\r\n        if (reminder.intervalType === RepeatInterval.Month) {\r\n            if (reminder.sameMonthDay) {\r\n                str += \"on the same day \"\r\n            } else {\r\n                str += \"on the same date \"\r\n            }\r\n        }\r\n\r\n        if (!reminder.forever) {\r\n            if (reminder.untilDate != null) {\r\n                str += \"until \" + format(reminder.untilDate, \"p PP\") + \" \"\r\n            } else if (reminder.untilEvents != null) {\r\n                str += \"for \" + reminder.untilEvents.toString() + \" times \"\r\n            }\r\n        }\r\n\r\n        return str\r\n    } else {\r\n        return \"Does not repeat\"\r\n    }\r\n}\r\n","import Dexie from \"dexie\";\r\nimport {SyncFile, SyncFileType} from \"../SyncFile\";\r\nimport {Note} from \"../Note\";\r\nimport {MindMap} from \"../MindMap\";\r\nimport {Tag} from \"../Tag\";\r\nimport {Category} from \"../Category\";\r\nimport {Reminder} from \"../Reminder\";\r\n\r\nexport const db = new Dexie(\"TimelineDB\")\r\n\r\nconst timelineItem = \"id,cloudId,createdDate,editedDate,deletedDate,deleted,\"\r\n\r\ndb.version(1).stores({\r\n    notes: timelineItem + \"title,text,content,pinned,archived,categoryId,reminderId,colorIndex,tags,attachments,permanentlyDeleted\",\r\n    mindmaps: timelineItem + \"title,text,content,pinned,archived,categoryId,colorIndex,tags,attachments,permanentlyDeleted\",\r\n    reminders: timelineItem + \"description,isSticky,lastTimeFired,firedTimes,markedDone,repeat,intervalType,intervalNumber,weekDays,sameMonthDay,forever,untilDate,untilEvents\",\r\n    tags: timelineItem + \"name\",\r\n    categories: timelineItem + \"name\",\r\n    attachments: timelineItem + \"fileCloudId,name,mimeType,type\",\r\n});\r\n\r\n// @ts-ignore\r\ndb.notes.mapToClass(Note)\r\n// @ts-ignore\r\ndb.mindmaps.mapToClass(MindMap)\r\n// @ts-ignore\r\ndb.reminders.mapToClass(Reminder)\r\n// @ts-ignore\r\ndb.categories.mapToClass(Category)\r\n// @ts-ignore\r\ndb.tags.mapToClass(Tag)\r\n\r\n// db.attachments.mapToClass() todo map attachment\r\n\r\n\r\nexport function deleteAllDatabases() {\r\n\r\n    // @ts-ignore\r\n    const dbs = [db.notes, db.mindmaps, db.reminders, db.categories, db.tags] //todo attachment db\r\n\r\n    dbs.forEach((db) => {\r\n        db.delete().then((e: any) => {\r\n            console.log(\"Deleted Db\", e)\r\n        }).catch((e: any) => {\r\n            console.log(\"Could Not Delete Db\", e)\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * Gets a file from database and returns it\r\n * @param file\r\n */\r\nexport function getFileFromDb(file: SyncFile) {\r\n    try {\r\n        switch (file.type) {\r\n            case SyncFileType.Note:\r\n                // @ts-ignore\r\n                return db.notes.where(\"cloudId\").equals(file.id).first()\r\n            case SyncFileType.MindMap:\r\n                // @ts-ignore\r\n                return db.mindmaps.where(\"cloudId\").equals(file.id).first()\r\n            case SyncFileType.Reminder:\r\n                // @ts-ignore\r\n                return db.reminders.where(\"cloudId\").equals(file.id).first()\r\n            case SyncFileType.Category:\r\n                // @ts-ignore\r\n                return db.categories.where(\"cloudId\").equals(file.id).first()\r\n            case SyncFileType.Tag:\r\n                // @ts-ignore\r\n                return db.tags.where(\"cloudId\").equals(file.id).first()\r\n            case SyncFileType.AttachmentRecord:\r\n                // @ts-ignore\r\n                return db.attachments.where(\"cloudId\").equals(file.id).first()\r\n            default:\r\n                console.warn(\"Unkown File Type Found\")\r\n                return null\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n        return null\r\n    }\r\n}\r\n\r\nexport function DeleteFileFromDb(file: SyncFile) {\r\n    switch (file.type) {\r\n        case SyncFileType.Note:\r\n            // @ts-ignore\r\n            db.notes.where(\"cloudId\").delete().catch(e => {\r\n                console.log(e)\r\n            })\r\n            break;\r\n        case SyncFileType.MindMap:\r\n            // @ts-ignore\r\n            db.mindmaps.where(\"cloudId\").delete().catch((e) => {\r\n                console.log(e)\r\n            })\r\n            break;\r\n        case SyncFileType.Reminder:\r\n            // @ts-ignore\r\n            db.reminders.where(\"cloudId\").delete().catch((e) => {\r\n                console.log(e)\r\n            })\r\n            break;\r\n        case SyncFileType.Category:\r\n            // @ts-ignore\r\n            db.categories.where(\"cloudId\").delete().catch((e) => {\r\n                console.log(e)\r\n            })\r\n            break;\r\n        case SyncFileType.Tag:\r\n            // @ts-ignore\r\n            db.tags.where(\"cloudId\").delete().catch((e) => {\r\n                console.log(e)\r\n            })\r\n            break;\r\n        case SyncFileType.AttachmentRecord:\r\n            // @ts-ignore\r\n            db.attachments.where(\"cloudId\").delete().catch((e) => {\r\n                console.log(e)\r\n            })\r\n            break;\r\n        default:\r\n            console.warn(\"Unkown File Type Found\")\r\n    }\r\n}\r\n","import {Note} from \"../Note\";\r\nimport {db} from \"./AppDatabase\";\r\n\r\n\r\n/**\r\n * Gets All Notes From Database\r\n */\r\nexport async function getAllNotes() {\r\n    // @ts-ignore\r\n    return await db.notes.toArray()\r\n}\r\n\r\n\r\nexport async function getNoteById(id: number) {\r\n    // @ts-ignore\r\n    return await db.notes.where(\"id\").equals(id).first()\r\n}\r\n\r\n/**\r\n * Adds a note into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function AddNoteIntoDb(item: Note) {\r\n    // @ts-ignore\r\n    await db.notes.add(item).catch(e => {\r\n        console.warn(\"Error Adding Note To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Adds a note into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function UpdateNoteIntoDb(item: Note) {\r\n    // @ts-ignore\r\n    await db.notes.put(item).catch(e => {\r\n        console.warn(\"Error Adding Note To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n","import {MindMap} from \"../MindMap\";\r\nimport {db} from \"./AppDatabase\";\r\n\r\n/**\r\n * Gets All Notes From Database\r\n */\r\nexport async function getAllMindMaps() {\r\n    // @ts-ignore\r\n    return await db.mindmaps.toArray()\r\n}\r\n\r\n/**\r\n * Adds a mindmap into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function AddMindMapIntoDb(item: MindMap) {\r\n    // @ts-ignore\r\n    await db.mindmaps.add(item).catch(e => {\r\n        console.warn(\"Error Adding Mindmap To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Adds a mindmap into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function UpdateMindMapIntoDb(item: MindMap) {\r\n    // @ts-ignore\r\n    await db.mindmaps.put(item).catch(e => {\r\n        console.warn(\"Error Adding Mindmap To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}","import {ThemeOptions} from \"@material-ui/core\";\r\n\r\nexport enum ThemeType {\r\n    Light = \"light\",\r\n    Dark = \"dark\"\r\n}\r\n\r\nconst raleway = \"'Raleway', sans-serif\"\r\nconst notoSans = \"'Noto Sans JP', sans-serif\"\r\n\r\nconst commonTheme = {\r\n    typography: {\r\n        h1: {\r\n            fontFamily: raleway,\r\n        },\r\n        h2: {\r\n            fontFamily: raleway\r\n        },\r\n        h3: {\r\n            fontFamily: raleway\r\n        },\r\n        h4: {\r\n            fontFamily: notoSans\r\n        },\r\n        h5: {\r\n            fontFamily: notoSans\r\n        },\r\n    }\r\n}\r\n\r\nexport const light: ThemeOptions = {\r\n    ...commonTheme,\r\n    palette: {\r\n        type: \"light\",\r\n        primary: {\r\n            light: \"rgba(255, 177, 0, 1)\",\r\n            main: \"rgba(236, 119, 22, 1)\",\r\n            dark: \"rgba(235, 99, 25, 1)\",\r\n        },\r\n        secondary: {\r\n            light: \"rgba(224, 130, 96, 1)\",\r\n            main: \"rgba(184, 110, 84, 1)\",\r\n            dark: \"rgba(148, 89, 69, 1)\",\r\n        },\r\n    },\r\n};\r\n\r\nexport const dark: ThemeOptions = {\r\n    ...commonTheme,\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: {\r\n            light: \"rgba(255, 177, 0, 1)\",\r\n            \"main\": \"rgba(236, 119, 22, 1)\",\r\n            \"dark\": \"rgba(235, 99, 25, 1)\",\r\n        },\r\n        secondary: {\r\n            light: \"rgba(224, 130, 96, 1)\",\r\n            main: \"rgba(184, 110, 84, 1)\",\r\n            dark: \"rgba(148, 89, 69, 1)\",\r\n        },\r\n    },\r\n};\r\n","import React from \"react\";\r\nimport {ThemeType} from \"../ui/Themes\";\r\n\r\nlet defaultState = {\r\n    themeType: ThemeType.Light,\r\n    setThemeType: (type: ThemeType) => {\r\n\r\n    },\r\n    drawerOpen: false,\r\n    setDrawerOpen: (open: boolean) => {\r\n    },\r\n    settingsOpen: false,\r\n    setSettingsOpen: (open: boolean) => {\r\n\r\n    },\r\n    accountOpen: false,\r\n    setAccountOpen: (open: boolean) => {\r\n\r\n    }\r\n};\r\n\r\nconst AppStateContext = React.createContext(defaultState);\r\n\r\nexport function AppStateProvider(props: { state: typeof defaultState; children: any }) {\r\n    return (\r\n        <AppStateContext.Provider value={props.state}>\r\n            {props.children}\r\n            <style>\r\n                {props.state.themeType === ThemeType.Dark ? (\r\n                    `:root {\r\n                            color-scheme: dark;\r\n                    }`) : null\r\n                }\r\n            </style>\r\n        </AppStateContext.Provider>\r\n    );\r\n}\r\n\r\nexport default function useAppState() {\r\n    let context = React.useContext(AppStateContext);\r\n    if (context == null) {\r\n        throw new Error(\"Storage Context outside provider\");\r\n    }\r\n    return context;\r\n}\r\n","const colors = {\r\n    almostBlack: \"#181A1B\",\r\n    lightBlack: \"#2F3336\",\r\n    almostWhite: \"#E6E6E6\",\r\n    white: \"#FFF\",\r\n    white10: \"rgba(255, 255, 255, 0.1)\",\r\n    black: \"#000\",\r\n    black10: \"rgba(0, 0, 0, 0.1)\",\r\n    primary: \"#1AB6FF\",\r\n    greyLight: \"#F4F7FA\",\r\n    grey: \"#E8EBED\",\r\n    greyMid: \"#C5CCD3\",\r\n    greyDark: \"#DAE1E9\",\r\n};\r\n\r\nexport const editorBase = {\r\n    ...colors,\r\n    fontFamily: \"-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen, Ubuntu,Cantarell,'Open Sans','Helvetica Neue',sans-serif\",\r\n    fontFamilyMono: \"'SFMono-Regular',Consolas,'Liberation Mono', Menlo, Courier,monospace\",\r\n    fontWeight: 400,\r\n    zIndex: 100,\r\n    link: colors.primary,\r\n    placeholder: \"#B1BECC\",\r\n    textSecondary: \"#4E5C6E\",\r\n    textLight: colors.white,\r\n    textHighlight: \"#b3e7ff\",\r\n    textHighlightForeground: colors.black,\r\n    selected: colors.primary,\r\n    codeComment: \"#6a737d\",\r\n    codePunctuation: \"#5e6687\",\r\n    codeNumber: \"#d73a49\",\r\n    codeProperty: \"#c08b30\",\r\n    codeTag: \"#3d8fd1\",\r\n    codeString: \"#032f62\",\r\n    codeSelector: \"#6679cc\",\r\n    codeAttr: \"#c76b29\",\r\n    codeEntity: \"#22a2c9\",\r\n    codeKeyword: \"#d73a49\",\r\n    codeFunction: \"#6f42c1\",\r\n    codeStatement: \"#22a2c9\",\r\n    codePlaceholder: \"#3d8fd1\",\r\n    codeInserted: \"#202746\",\r\n    codeImportant: \"#c94922\",\r\n\r\n    blockToolbarBackground: colors.white,\r\n    blockToolbarTrigger: colors.greyMid,\r\n    blockToolbarTriggerIcon: colors.white,\r\n    blockToolbarItem: colors.almostBlack,\r\n    blockToolbarIcon: undefined,\r\n    blockToolbarIconSelected: colors.black,\r\n    blockToolbarText: colors.almostBlack,\r\n    blockToolbarTextSelected: colors.black,\r\n    blockToolbarHoverBackground: colors.greyLight,\r\n    blockToolbarDivider: colors.greyMid,\r\n\r\n    noticeInfoBackground: \"#F5BE31\",\r\n    noticeInfoText: colors.almostBlack,\r\n    noticeTipBackground: \"#9E5CF7\",\r\n    noticeTipText: colors.white,\r\n    noticeWarningBackground: \"#FF5C80\",\r\n    noticeWarningText: colors.white,\r\n};\r\n\r\nexport const editorLight = {\r\n    ...editorBase,\r\n    background: \"rgba(0,0,0,0)\", //custom attr\r\n    text: colors.almostBlack,\r\n    code: colors.lightBlack,\r\n    cursor: colors.black,\r\n    divider: colors.greyMid,\r\n\r\n    toolbarBackground: colors.lightBlack,\r\n    toolbarHoverBackground: colors.black,\r\n    toolbarInput: colors.white10,\r\n    toolbarItem: colors.white,\r\n\r\n    tableDivider: colors.greyMid,\r\n    tableSelected: colors.primary,\r\n    tableSelectedBackground: \"#E5F7FF\",\r\n\r\n    quote: colors.greyDark,\r\n    codeBackground: colors.greyLight,\r\n    codeBorder: colors.grey,\r\n    horizontalRule: colors.greyMid,\r\n    imageErrorBackground: colors.greyLight,\r\n\r\n    scrollbarBackground: colors.greyLight,\r\n    scrollbarThumb: colors.greyMid,\r\n};\r\n\r\nexport const editorDark = {\r\n    ...editorBase,\r\n    background: \"rgba(0,0,0,0)\", //custom attr\r\n    text: colors.almostWhite,\r\n    code: colors.almostWhite,\r\n    cursor: colors.white,\r\n    divider: \"#4E5C6E\",\r\n    placeholder: \"#52657A\",\r\n\r\n    toolbarBackground: colors.white,\r\n    toolbarHoverBackground: colors.greyMid,\r\n    toolbarInput: colors.black10,\r\n    toolbarItem: colors.lightBlack,\r\n\r\n    tableDivider: colors.lightBlack,\r\n    tableSelected: colors.primary,\r\n    tableSelectedBackground: \"#002333\",\r\n\r\n    quote: colors.greyDark,\r\n    codeBackground: \"rgba(0,0,0,0)\",\r\n    codeBorder: colors.lightBlack,\r\n    codeString: \"#3d8fd1\",\r\n    horizontalRule: colors.lightBlack,\r\n    imageErrorBackground: \"rgba(0, 0, 0, 0.5)\",\r\n\r\n    scrollbarBackground: colors.black,\r\n    scrollbarThumb: colors.lightBlack,\r\n};","import {MindMap} from \"../model/MindMap\";\r\nimport {Note} from \"../model/Note\";\r\nimport {Reminder} from \"../model/Reminder\";\r\nimport {Category} from \"../model/Category\";\r\nimport {Tag} from \"../model/Tag\";\r\nimport {ThemeType} from \"../ui/Themes\";\r\n\r\nexport function getNextId(items: Array<Note | MindMap | Reminder | Category | Tag>): number {\r\n    let id = 0\r\n    items.forEach(item => {\r\n        if (item.id != null && item.id > id) {\r\n            id = item.id\r\n        }\r\n    })\r\n    id += 1\r\n    return id\r\n}\r\n\r\nexport const lightColorsList = [\r\n    \"#FFFFFF\",\r\n    \"#FFA4A4\",\r\n    \"#FF95B9\",\r\n    \"#E2A1ED\",\r\n    \"#90CAF9\",\r\n    \"#81D4FA\",\r\n    \"#80DEEA\",\r\n    \"#A5D6A7\",\r\n    \"#C5E1A5\",\r\n    \"#E6EE9C\",\r\n    \"#FFE082\",\r\n    \"#FFAB91\",\r\n]\r\n\r\nexport const darkColorsList = [\r\n    \"#202020\",\r\n    \"#6E3838\",\r\n    \"#63283C\",\r\n    \"#5E3465\",\r\n    \"#3C6D95\",\r\n    \"#307898\",\r\n    \"#276971\",\r\n    \"#3E6040\",\r\n    \"#54673E\",\r\n    \"#73783C\",\r\n    \"#8F782C\",\r\n    \"#8E4D39\",\r\n]\r\n\r\nexport const getColorForIndex = (index: number, themeType: ThemeType) => {\r\n    if (themeType === ThemeType.Light) {\r\n        return lightColorsList[index]\r\n    } else {\r\n        return darkColorsList[index]\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Note} from \"../model/Note\";\r\nimport {MindMap} from \"../model/MindMap\";\r\nimport {Category} from \"../model/Category\";\r\nimport {Tag} from \"../model/Tag\";\r\nimport {Reminder} from \"../model/Reminder\";\r\n\r\n\r\nexport type StorageProps = {\r\n    notes: Array<Note>,\r\n    initNotes: () => void,\r\n    mindmaps: Array<MindMap>,\r\n    initMindMaps: () => void,\r\n    reminders: Array<Reminder>,\r\n    initReminders: () => void,\r\n    categories: Array<Category>,\r\n    initCategories: () => void,\r\n    tags: Array<Tag>,\r\n    initTags: () => void\r\n}\r\n\r\nlet defaultStorage: StorageProps = {\r\n    notes: [],\r\n    mindmaps: [],\r\n    reminders: [],\r\n    categories: [],\r\n    tags: [],\r\n    initNotes: () => {\r\n    },\r\n    initCategories: () => {\r\n    },\r\n    initMindMaps: () => {\r\n    },\r\n    initReminders: () => {\r\n    },\r\n    initTags: () => {\r\n    },\r\n};\r\n\r\nexport const StorageContext = React.createContext<StorageProps>(defaultStorage);\r\n\r\nexport function StorageProvider(props: { storage: StorageProps; children: any }) {\r\n    return (\r\n        <StorageContext.Provider value={props.storage}>\r\n            {props.children}\r\n        </StorageContext.Provider>\r\n    );\r\n}\r\n\r\nexport default function useStorage() {\r\n    let context = React.useContext(StorageContext);\r\n    if (context == null) {\r\n        throw new Error(\"Storage Context outside provider\");\r\n    }\r\n    return context;\r\n}\r\n","export function formatDate(date: number, withTime: boolean = false, withYear: boolean = false): string {\r\n    let d = new Date(date);\r\n    let ye = new Intl.DateTimeFormat('en', {year: 'numeric'}).format(d);\r\n    let mo = new Intl.DateTimeFormat('en', {month: 'short'}).format(d);\r\n    let da = new Intl.DateTimeFormat('en', {day: '2-digit'}).format(d);\r\n\r\n    //todo withTime\r\n\r\n    if (withYear) {\r\n        return `${da} ${mo},${ye}`\r\n    } else {\r\n        return `${da} ${mo}`\r\n    }\r\n}","import {SvgIcon} from \"@material-ui/core\";\r\n\r\nexport default function PinFilledIcon(props: any | null) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <path d=\"M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z\"/>\r\n        </SvgIcon>\r\n    )\r\n}","import {SvgIcon} from \"@material-ui/core\";\r\n\r\nexport default function PinIcon(props: any | null) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <path d=\"M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12M8.8,14L10,12.8V4H14V12.8L15.2,14H8.8Z\"/>\r\n        </SvgIcon>\r\n    )\r\n}","import {Note} from \"../../../../model/Note\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport React, {useMemo} from \"react\";\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {CardActionArea, CardActions, Chip, IconButton} from \"@material-ui/core\";\r\nimport {MindMap} from \"../../../../model/MindMap\";\r\nimport RichMarkdownEditor from \"rich-markdown-editor\";\r\nimport useAppState from \"../../../../store/AppStateProvider\";\r\nimport {ThemeType} from \"../../../Themes\";\r\nimport {editorDark, editorLight} from \"../../../screens/NoteEditor/EditorTheme\";\r\nimport {getColorForIndex} from \"../../../../utils/Helpers\";\r\nimport {Category} from \"../../../../model/Category\";\r\nimport {Tag} from \"../../../../model/Tag\";\r\nimport useStorage from \"../../../../store/StorageProvider\";\r\nimport {formatDate} from \"../../../../utils/DateTimeFormatter\";\r\nimport {\r\n    ArchiveOutlined,\r\n    CategoryOutlined,\r\n    CheckCircle,\r\n    CloseOutlined,\r\n    LabelOutlined,\r\n    PaletteOutlined,\r\n    UnarchiveOutlined\r\n} from \"@material-ui/icons\";\r\nimport PinFilledIcon from \"../../../icons/PinFilledIcon\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport PinIcon from \"../../../icons/PinIcon\";\r\nimport \"./MainCard.scss\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n        },\r\n        selectedCard: {\r\n            boxShadow: \"0px 0px 1px 1px rgba(0,0,0,.07)\",\r\n            border: \"2px solid \" + theme.palette.text.secondary\r\n        },\r\n        menuIcon: {\r\n            marginLeft: 'auto',\r\n        },\r\n        cardActionArea: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            opacity: 0,\r\n            transition: \"opacity .25s ease-out\"\r\n        },\r\n        cardIconBtn: {\r\n            padding: \"0.4em\"\r\n        },\r\n        cardFooter: {\r\n            margin: \"0.5em 1em 0.5em 1em\",\r\n        },\r\n        chipContainer: {\r\n            margin: \"0 0 0.5em 0\",\r\n        },\r\n        cardChip: {\r\n            margin: \"0.2em\"\r\n        },\r\n        footerText: {\r\n            margin: \"0 0 0 0.2em\",\r\n            color: theme.palette.text.secondary,\r\n            fontSize: \"0.8rem\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"nowrap\",\r\n            justifyContent: \"space-between\",\r\n\r\n        },\r\n        dateText: {}\r\n    }),\r\n);\r\n\r\n\r\nexport default function MainCard(props: {\r\n    item: Note | MindMap,\r\n    isSelected: boolean,\r\n    openOnClick: boolean,\r\n    onSelectDeselect: () => void,\r\n    onMenuOpen: (target: any, item: Note | MindMap) => void,\r\n    onArchiveUnarchive: (item: Note | MindMap) => void,\r\n    onPinUnpin: (item: Note | MindMap) => void,\r\n    onTag: (item: Note | MindMap, tags: Array<Tag>) => void,\r\n    onCategorize: (item: Note | MindMap, category: Category | null) => void,\r\n    onColor: (item: Note | MindMap) => void,\r\n}) {\r\n\r\n    const {item, openOnClick} = props\r\n    const {\r\n        id,\r\n        editedDate,\r\n        title,\r\n        text\r\n    } = item\r\n\r\n    const classes = useStyles();\r\n    const {categories, tags} = useStorage()\r\n\r\n    const history = useHistory()\r\n\r\n    let itemCategory: Category | null = useMemo(() => {\r\n        if (item.categoryId !== -1) {\r\n            let c = categories.find(cat => cat.id === item.categoryId)\r\n            if (c != null) {\r\n                return c\r\n            } else {\r\n                return null\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }, [categories, item])\r\n\r\n    let itemTags: Array<Tag> = useMemo(() => {\r\n        let t: Array<Tag> = []\r\n        item.tags.forEach(tagId => {\r\n            let tag = tags.find(tag => tag.id === tagId)\r\n            if (tag != null) {\r\n                t.push(tag)\r\n            }\r\n        })\r\n        return t\r\n    }, [tags, item])\r\n\r\n    const handleCardClick = () => {\r\n        if (openOnClick) {\r\n            if (item instanceof Note) {\r\n                history.push(\"/note/\" + id)\r\n            } else {\r\n                history.push(\"/mindmap/\" + id)\r\n            }\r\n        }\r\n    }\r\n\r\n    const {themeType} = useAppState()\r\n    let cardStyles = {}\r\n    if (item.colorIndex !== 0 && item.colorIndex !== -1) {\r\n        cardStyles = {\r\n            ...cardStyles,\r\n            background: getColorForIndex(item.colorIndex, themeType),\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            className={`${classes.root} ${props.isSelected ? classes.selectedCard : \"\"} main-item-card`}\r\n            variant={\"outlined\"}\r\n            style={cardStyles}\r\n        >\r\n            <IconButton className={`card-action-btn`} onClick={() => {\r\n                props.onSelectDeselect()\r\n            }}>\r\n                {props.isSelected ? <CloseOutlined/> : <CheckCircle/>}\r\n            </IconButton>\r\n            <CardActionArea onClick={handleCardClick}>\r\n                {/*<CardMedia*/}\r\n                {/*    className={classes.media}*/}\r\n                {/*    image=\"/static/images/cards/contemplative-reptile.jpg\"*/}\r\n                {/*    title=\"Contemplative Reptile\"*/}\r\n                {/*/>*/}\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h4\">\r\n                        {title}\r\n                    </Typography>\r\n                    <RichMarkdownEditor\r\n                        onChange={() => {\r\n                        }}\r\n                        readOnly={true}\r\n                        defaultValue={text.substring(0, text.length > 102 ? 102 : text.length)}\r\n                        theme={themeType === ThemeType.Dark ? editorDark : editorLight}\r\n                    />\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <div className={classes.cardFooter}>\r\n                <div className={classes.chipContainer}>\r\n                    {\r\n                        itemTags.map(tag => {\r\n                            if (tag != null) {\r\n                                return (\r\n                                    <Chip\r\n                                        key={item.id + \"-\" + tag.id}\r\n                                        label={tag?.name}\r\n                                        variant={\"outlined\"}\r\n                                        className={classes.cardChip}\r\n                                    />\r\n                                )\r\n                            } else {\r\n                                return null\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n                <Typography variant={\"subtitle1\"} className={classes.footerText}>\r\n                    {itemCategory != null ? (\r\n                            <span>{itemCategory?.name}</span>)\r\n                        : null}\r\n                    <span className={classes.dateText}>{formatDate(editedDate)}</span>\r\n                </Typography>\r\n            </div>\r\n            <CardActions disableSpacing className={`${classes.cardActionArea} card-actions`}>\r\n                <IconButton aria-label=\"color\" size={\"small\"} className={classes.cardIconBtn} onClick={() => {\r\n                    props.onPinUnpin(item)\r\n                }}>\r\n                    {item.pinned ? (<PinFilledIcon fontSize={\"small\"}/>) : (<PinIcon fontSize={\"small\"}/>)}\r\n                </IconButton>\r\n                <IconButton aria-label=\"color\" size={\"small\"} className={classes.cardIconBtn}\r\n                            onClick={() => props.onColor(item)}>\r\n                    <PaletteOutlined fontSize={\"small\"}/>\r\n                </IconButton>\r\n                <IconButton aria-label=\"archive\" size={\"small\"}\r\n                            className={classes.cardIconBtn}\r\n                            onClick={() => props.onArchiveUnarchive(item)}>\r\n                    {\r\n                        item.archived ? <UnarchiveOutlined fontSize={\"small\"}/> : <ArchiveOutlined fontSize={\"small\"}/>\r\n                    }\r\n                </IconButton>\r\n                <IconButton aria-label=\"tag\" size={\"small\"} className={classes.cardIconBtn}\r\n                            onClick={() => props.onTag(item, itemTags)}>\r\n                    <LabelOutlined fontSize={\"small\"}/>\r\n                </IconButton>\r\n                <IconButton aria-label=\"categorize\" size={\"small\"} className={classes.cardIconBtn}\r\n                            onClick={() => props.onCategorize(item, itemCategory)}>\r\n                    <CategoryOutlined fontSize={\"small\"}/>\r\n                </IconButton>\r\n                <IconButton aria-label=\"card-menu\" className={`${classes.menuIcon} ${classes.cardIconBtn}`}\r\n                            size={\"small\"} onClick={(e) => props.onMenuOpen(e.currentTarget, item)}>\r\n                    <MoreVertIcon fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","import {Note} from \"../model/Note\";\r\nimport {MindMap} from \"../model/MindMap\";\r\n\r\nexport class SectionItem {\r\n    title: string = \"\"\r\n\r\n    constructor(t: string) {\r\n        this.title = t\r\n    }\r\n}\r\n\r\nexport interface SectionFilter {\r\n    name?: string,\r\n    isDeleted?: boolean,\r\n    isPinned?: boolean,\r\n    isArchived?: boolean,\r\n    isPermanentlyDeleted?: boolean,\r\n}\r\n\r\nexport function filterItems(items: Array<Note | MindMap>, filter: SectionFilter) {\r\n    return items.filter(item => {\r\n        return (\r\n            (filter.isArchived == null || filter.isArchived === item.archived) &&\r\n            (filter.isPinned == null || filter.isPinned === item.pinned) &&\r\n            (filter.isDeleted == null || filter.isDeleted === item.deleted) &&\r\n            (filter.isPermanentlyDeleted == null || filter.isPermanentlyDeleted === item.permanentlyDeleted)\r\n        )\r\n    })\r\n}\r\n\r\nexport const getSectionedList = (notes: Array<Note>, mindmaps: Array<MindMap>, mainFilter: SectionFilter, filters: Array<SectionFilter> | undefined) => {\r\n\r\n    //Filtering With Main Filter / Sorting\r\n    let list = filterItems([...notes, ...mindmaps], mainFilter).sort((item1, item2) => {\r\n        return item2.editedDate - item1.editedDate\r\n    })\r\n\r\n    //Filtering & Building Sections\r\n    let sectionedList: Array<Note | MindMap | SectionItem> = [];\r\n\r\n    if (filters != null) {\r\n        filters.forEach((filter) => {\r\n            let filteredList = filterItems(list, filter)\r\n            if (filteredList.length > 0 && filter.name != null) {\r\n                sectionedList = [...sectionedList, new SectionItem(filter.name), ...filteredList]\r\n            }\r\n        })\r\n    } else {\r\n        sectionedList = list\r\n    }\r\n\r\n    return sectionedList\r\n}\r\n","export enum StaggeredItemSpan {\r\n    Zero,\r\n    Single,\r\n    Full,\r\n}\r\n\r\nexport enum StaggeredAlignment {\r\n    Start,\r\n    Center,\r\n    End,\r\n}\r\n\r\nexport interface StaggeredGridProps<Type> {\r\n    columnWidth?: number,\r\n    alignment?: StaggeredAlignment\r\n    className?: string,\r\n    items: Array<Type>,\r\n    render: (item: Type, index: number) => any\r\n}\r\n\r\nexport interface StaggeredGridState {\r\n    gridWidth: number,\r\n    gridHeight: number,\r\n}\r\n\r\nexport interface GridItemData {\r\n    getItemWidth: () => number | null,\r\n    getItemHeight: () => number | null,\r\n    itemColumnSpan: StaggeredItemSpan\r\n    update: (width: number, x: number, y: number) => void\r\n}\r\n\r\n\r\n//Staggered Grid Item Model\r\n\r\nexport interface StaggeredGridItemProps {\r\n    spans?: StaggeredItemSpan,\r\n    index: number,\r\n}\r\n\r\n\r\nexport interface StaggeredGridItemState {\r\n    translateX: number,\r\n    translateY: number,\r\n    itemWidth: number\r\n}","import React, {useContext} from \"react\";\r\nimport {StaggeredItemSpan} from \"./StaggeredGridModel\";\r\n\r\nconst defaultValue = {\r\n    gridWidth: 0,\r\n    gridHeight: 0,\r\n    colWidth: 400,\r\n    recalculate: () => {\r\n    },\r\n    itemAdded: (index: number, itemColumnSpan: StaggeredItemSpan, getWidth: () => number | null, getHeight: () => number | null, update: (width: number, x: number, y: number) => void) => {\r\n    },\r\n    itemRemoved: (index: number) => {\r\n    },\r\n    itemUpdated: (index: number) => {\r\n\r\n    }\r\n}\r\n\r\nexport const StaggeredGridContext = React.createContext(defaultValue)\r\n\r\n// export const StaggeredGridProvider : FunctionComponent = (props) => {\r\n//     return (\r\n//         <StaggeredGridContext.Provider value={props.value}>\r\n//             {props.children}\r\n//         </StaggeredGridContext.Provider>\r\n//     )\r\n// }\r\n\r\nexport function useStaggeredGrid() {\r\n    return useContext(StaggeredGridContext)\r\n}\r\n\r\n","import React from \"react\";\r\nimport {\r\n    GridItemData,\r\n    StaggeredAlignment,\r\n    StaggeredGridProps,\r\n    StaggeredGridState,\r\n    StaggeredItemSpan,\r\n} from \"./StaggeredGridModel\";\r\nimport {StaggeredGridContext} from \"./StaggeredGridContext\";\r\n\r\nexport default class StaggeredGrid<ItemType> extends React.Component<StaggeredGridProps<ItemType> & typeof StaggeredGrid.defaultProps, StaggeredGridState> {\r\n\r\n    static defaultProps = {\r\n        alignment: StaggeredAlignment.Center,\r\n        columnWidth: 260,\r\n        className: \"\"\r\n    }\r\n\r\n    gridItems: Array<GridItemData> = []\r\n\r\n    state = {\r\n        gridWidth: 0,\r\n        gridHeight: 0\r\n    }\r\n\r\n    gridElementRef: HTMLElement | null = null\r\n\r\n\r\n    getColsCount = () => {\r\n        let count = Math.ceil(this.state.gridWidth / this.props.columnWidth) - 1\r\n        if (count < 1 || count === Infinity) {\r\n            return 1\r\n        }\r\n        return count\r\n    }\r\n\r\n    reposition = () => {\r\n        if (document.readyState === 'complete') {\r\n            try {\r\n                let rowWidth = 0;\r\n                let colNumber = 0\r\n                let columnCount = this.getColsCount()\r\n                if (this.gridItems.length < columnCount) {\r\n                    columnCount = this.gridItems.length\r\n                }\r\n                let colsHeight: number[] = Array(columnCount).fill(0)\r\n                let rowOffset = 0;\r\n\r\n                //Calculating Row Offset\r\n                if (this.props.alignment === StaggeredAlignment.Center) {\r\n                    rowOffset = (this.state.gridWidth - (columnCount * this.props.columnWidth)) / 2\r\n                } else if (this.props.alignment === StaggeredAlignment.End) {\r\n                    rowOffset = this.state.gridWidth - (columnCount * this.props.columnWidth)\r\n                }\r\n\r\n                this.gridItems.forEach(item => {\r\n                    try {\r\n                        let x = 0;\r\n                        let y = 0;\r\n\r\n                        let itemWidth = item.itemColumnSpan === StaggeredItemSpan.Single ? this.props.columnWidth : item.itemColumnSpan === StaggeredItemSpan.Full ? (this.state.gridWidth - rowOffset - rowOffset) : 0\r\n                        const itemHeight = item.getItemHeight()\r\n\r\n                        if (itemHeight != null || itemHeight !== 0 || itemWidth != null || itemWidth !== 0) {\r\n\r\n                            //Constraining Item Width\r\n                            if (itemWidth > this.state.gridWidth) {\r\n                                itemWidth = this.state.gridWidth\r\n                            }\r\n\r\n                            //Calculating Item Offsets\r\n                            if ((rowWidth + itemWidth) < this.state.gridWidth && item.itemColumnSpan === StaggeredItemSpan.Single) { //Item can be added to current row\r\n                                x = rowWidth\r\n                                rowWidth += itemWidth\r\n                                y = colsHeight[colNumber]\r\n                                colsHeight[colNumber] += itemHeight!\r\n                                colNumber++\r\n                            } else { //Item cannot be added to current row\r\n                                colNumber = 0\r\n                                x = 0\r\n                                y = colsHeight[colNumber]\r\n                                if (item.itemColumnSpan === StaggeredItemSpan.Full) {\r\n                                    let largeHeight = 0\r\n                                    colsHeight.forEach((height) => {\r\n                                        if (height > largeHeight) {\r\n                                            largeHeight = height\r\n                                        }\r\n                                    })\r\n                                    colsHeight.forEach((height, index) => {\r\n                                        colsHeight[index] = largeHeight + itemHeight!\r\n                                    })\r\n                                    y = largeHeight\r\n                                    rowWidth = 0\r\n                                } else if (item.itemColumnSpan === StaggeredItemSpan.Single) {\r\n                                    colsHeight[colNumber] += itemHeight!\r\n                                    rowWidth = itemWidth\r\n                                    colNumber++\r\n                                }\r\n                            }\r\n\r\n                            item.update(itemWidth, (rowOffset + x), y)\r\n                        }\r\n                    } catch (e) {\r\n                        console.warn(e)\r\n                    }\r\n                })\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates Grid Width & Height\r\n     */\r\n    refresh = () => {\r\n        if (this.gridElementRef != null) {\r\n            if (this.state.gridWidth !== this.gridElementRef.clientWidth || this.state.gridHeight !== this.gridElementRef.clientHeight) {\r\n                this.setState({\r\n                    gridWidth: this.gridElementRef.clientWidth,\r\n                    gridHeight: this.gridElementRef.clientHeight\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Grid Mounted\")\r\n        window.addEventListener(\"resize\", this.refresh)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.refresh)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{}>, snapshot?: any) {\r\n        this.refresh()\r\n        this.reposition()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StaggeredGridContext.Provider\r\n                value={{\r\n                    colWidth: this.props.columnWidth,\r\n                    gridWidth: this.state.gridWidth,\r\n                    gridHeight: this.state.gridHeight,\r\n                    itemAdded: (index: number, itemColumnSpan: StaggeredItemSpan, getWidth: () => number | null, getHeight: () => number | null, update: (width: number, x: number, y: number) => void) => {\r\n                        this.gridItems[index] = {\r\n                            getItemWidth: getWidth,\r\n                            getItemHeight: getHeight,\r\n                            itemColumnSpan,\r\n                            update\r\n                        }\r\n                    },\r\n                    itemUpdated: (index: number) => {\r\n                        //todo item updated only\r\n                        this.refresh()\r\n                        this.reposition()\r\n                    },\r\n                    itemRemoved: (index: number) => {\r\n                        if (this.gridItems[index] != null) {\r\n                            this.gridItems.splice(index, 1)\r\n                        }\r\n                    },\r\n                    recalculate: this.reposition\r\n                }}>\r\n                <div\r\n                    ref={(element) => {\r\n                        this.gridElementRef = element\r\n                    }}\r\n                    style={{\r\n                        position: \"relative\",\r\n                    }}\r\n                    className={this.props.className}\r\n                >\r\n                    {this.props.items.map((item, index) => {\r\n                        return this.props.render(item, index)\r\n                    })}\r\n                </div>\r\n            </StaggeredGridContext.Provider>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {StaggeredGridContext} from \"./StaggeredGridContext\";\r\nimport {StaggeredGridItemProps, StaggeredGridItemState, StaggeredItemSpan} from \"./StaggeredGridModel\";\r\n\r\nexport default class StaggeredGridItem extends React.Component<StaggeredGridItemProps & typeof StaggeredGridItem.defaultProps, StaggeredGridItemState> {\r\n\r\n    static contextType = StaggeredGridContext\r\n\r\n    static defaultProps = {\r\n        spans: StaggeredItemSpan.Single\r\n    }\r\n\r\n    itemWidth = 0\r\n    itemHeight = 0\r\n\r\n    state = {\r\n        translateX: 0,\r\n        translateY: 0,\r\n        itemWidth: 0\r\n    }\r\n\r\n    itemElementRef: HTMLElement | null = null\r\n\r\n    updateTranslate = (width: number, x: number, y: number) => {\r\n        if (this.state.itemWidth !== width || x !== this.state.translateX || y !== this.state.translateY) {\r\n            this.setState({\r\n                itemWidth: width,\r\n                translateX: x,\r\n                translateY: y,\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reports height and width\r\n     */\r\n    reportData = () => {\r\n        this.context.itemAdded(this.props.index, this.props.spans, () => this.itemElementRef?.clientWidth, () => this.itemElementRef?.clientHeight, this.updateTranslate)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reportData()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<StaggeredGridItemProps & typeof StaggeredGridItem.defaultProps>, prevState: Readonly<StaggeredGridItemState>, snapshot?: any) {\r\n        this.reportData()\r\n        this.context.itemUpdated(this.props.index)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.context.itemRemoved(this.props.index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={(element) => {\r\n                    this.itemElementRef = element\r\n                }}\r\n                style={{\r\n                    width: this.state.itemWidth + \"px\",\r\n                    position: \"absolute\",\r\n                    transform: `translate(${this.state.translateX}px,${this.state.translateY}px)`,\r\n                    transition: \"transform .3s ease-out\",\r\n                    overflowX: \"hidden\"\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}","import {makeStyles} from \"@material-ui/styles\";\r\nimport {AppBar, createStyles, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Close} from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport {Theme} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `100%`,\r\n        },\r\n        background: theme.palette.background.default,\r\n        boxShadow: \"0px 0px 0px 0px\",\r\n        borderBottom: \"1px solid \" + theme.palette.divider\r\n    },\r\n    menuButton: {},\r\n    selectionTitle: {\r\n        padding: \"0em 1em\"\r\n    },\r\n    //Custom Styles\r\n    rightContainer: {\r\n        marginLeft: \"auto\",\r\n    },\r\n}));\r\n\r\nexport function BaseSelectionBar(props: { children: any, title: string, isVisible: boolean, onClose: () => void }) {\r\n    const classes = useStyles();\r\n\r\n    if (props.isVisible) {\r\n        return (\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={`${classes.appBar}`}\r\n                color={\"transparent\"}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={props.onClose}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <Close/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap className={classes.selectionTitle}>\r\n                        {props.title}\r\n                    </Typography>\r\n                    <div className={classes.rightContainer}>\r\n                        {props.children}\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        );\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n","import {BaseSelectionBar} from \"../commons/BaseSelectionBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {ArchiveOutlined, CategoryOutlined, DeleteOutline, LabelOutlined, UnarchiveOutlined} from \"@material-ui/icons\";\r\nimport PinIcon from \"../../icons/PinIcon\";\r\nimport {Note} from \"../../../model/Note\";\r\nimport PinFilledIcon from \"../../icons/PinFilledIcon\";\r\nimport {FunctionComponent} from \"react\";\r\nimport {MindMap} from \"../../../model/MindMap\";\r\n\r\ninterface Props {\r\n    checked: Array<Note | MindMap>,\r\n    setChecked: (checked: Array<Note | MindMap>) => void,\r\n    showPinUnpin?: boolean,\r\n    showArchiveUnArchive?: boolean,\r\n    showTag?: boolean,\r\n    showCategory?: boolean,\r\n    onPinUnPin: () => void,\r\n    onArchiveUnArchive: () => void,\r\n    onDelete: () => void,\r\n    onTag: () => void,\r\n    onCategorize: () => void,\r\n}\r\n\r\nexport const MainSelectionBar: FunctionComponent<Props> = (props) => {\r\n\r\n    return (\r\n        <BaseSelectionBar\r\n            title={props.checked.length.toString()}\r\n            isVisible={props.checked.length > 0}\r\n            onClose={() => props.setChecked([])}\r\n        >\r\n\r\n            {props.showPinUnpin ? (\r\n                <IconButton onClick={props.onPinUnPin}>\r\n                    {\r\n                        props.checked.filter(item => item.pinned).length > 0 ? (<PinFilledIcon/>) : (<PinIcon/>)\r\n                    }\r\n                </IconButton>\r\n            ) : null}\r\n            {props.showArchiveUnArchive ? (\r\n                <IconButton onClick={props.onArchiveUnArchive}>\r\n                    {\r\n                        props.checked.filter(item => item.archived).length > 0 ? (<UnarchiveOutlined/>) : (\r\n                            <ArchiveOutlined/>)\r\n                    }\r\n                </IconButton>\r\n            ) : null}\r\n            {props.showTag ? (\r\n                <IconButton onClick={props.onTag}>\r\n                    <LabelOutlined/>\r\n                </IconButton>\r\n            ) : null}\r\n            {props.showCategory ? (\r\n                <IconButton onClick={props.onCategorize}>\r\n                    <CategoryOutlined/>\r\n                </IconButton>\r\n            ) : null}\r\n            <IconButton onClick={props.onDelete}>\r\n                <DeleteOutline/>\r\n            </IconButton>\r\n        </BaseSelectionBar>\r\n    )\r\n}\r\n\r\nMainSelectionBar.defaultProps = {\r\n    showPinUnpin: true,\r\n    showArchiveUnArchive: true,\r\n    showTag: true,\r\n    showCategory: true\r\n}\r\n","import {Tag} from \"../Tag\";\r\nimport {db} from \"./AppDatabase\";\r\n\r\n/**\r\n * Gets All Tags From Database\r\n */\r\nexport async function getAllTags() {\r\n    // @ts-ignore\r\n    return await db.tags.toArray()\r\n}\r\n\r\n\r\n/**\r\n * Adds a tag into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function AddTagIntoDb(item: Tag) {\r\n    // @ts-ignore\r\n    await db.tags.add(item).catch(e => {\r\n        console.warn(\"Error Adding Tag To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Adds a tag into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function UpdateTagIntoDb(item: Tag) {\r\n    // @ts-ignore\r\n    await db.tags.put(item).catch(e => {\r\n        console.warn(\"Error Adding Tag To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Deletes A Tag In Db\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function DeleteTagInDb(item: Tag) {\r\n    // @ts-ignore\r\n    await db.tags.where(\"id\").equals(item.id).delete().catch((e) => {\r\n        console.warn(\"Error Deleting A Tag In Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {Tag} from \"../../../model/Tag\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport {Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {deleteTag} from \"../../screens/Tags\";\r\n\r\ninterface TagItemMenuProps {\r\n    onShowTagDialog: () => void,\r\n    onItemSelect: () => void,\r\n    tag: Tag,\r\n    anchorEl: any,\r\n    onMenuClose: () => void\r\n}\r\n\r\nconst useTagMenuStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        menuItem: {},\r\n    }),\r\n)\r\n\r\nexport default function TagItemMenu(props: TagItemMenuProps) {\r\n\r\n    const classes = useTagMenuStyles()\r\n\r\n    const {initTags} = useStorage()\r\n\r\n    return (\r\n        <Menu\r\n            open={Boolean(props.anchorEl)}\r\n            onClose={props.onMenuClose}\r\n            anchorEl={props.anchorEl}\r\n        >\r\n            <MenuItem onClick={() => {\r\n                props.onItemSelect()\r\n                props.onMenuClose()\r\n            }}>\r\n                <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                    Select\r\n                </Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={() => {\r\n                props.onShowTagDialog()\r\n                props.onMenuClose()\r\n            }}>\r\n                <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                    Edit\r\n                </Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={() => {\r\n                deleteTag(props.tag).then(() => {\r\n                    initTags()\r\n                })\r\n                props.onMenuClose()\r\n            }}>\r\n                <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                    Delete\r\n                </Typography>\r\n            </MenuItem>\r\n        </Menu>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {Tag} from \"../../../model/Tag\";\r\nimport {AddTagIntoDb, getAllTags, UpdateTagIntoDb} from \"../../../model/database/TagDao\";\r\nimport {getNextId} from \"../../../utils/Helpers\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\n\r\nexport default function TagDialog(props: { tag: Tag, open: boolean, setOpen: (open: boolean) => void }) {\r\n\r\n    const {tags, initTags} = useStorage()\r\n    const [tagName, setTagName] = useState(props.tag.name)\r\n\r\n    useEffect(() => {\r\n        setTagName(props.tag.name)\r\n    }, [props.tag])\r\n\r\n    return (\r\n        <Dialog open={props.open} onClose={() => props.setOpen(false)} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">\r\n                {\r\n                    props.tag.id == null || props.tag.id === -1 ? \"Create Tag\" : \"Update Tag\"\r\n                }\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"name\"\r\n                    label=\"Tag Name\"\r\n                    type=\"text\"\r\n                    value={tagName}\r\n                    onChange={(e) => {\r\n                        setTagName(e.currentTarget.value)\r\n                    }}\r\n                    fullWidth\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => props.setOpen(false)} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button color=\"primary\" onClick={() => {\r\n                    props.tag.name = tagName\r\n                    props.setOpen(false);\r\n                    if (props.tag.id == null || props.tag.id === -1) {\r\n                        props.tag.id = getNextId(tags)\r\n                        AddTagIntoDb(props.tag)\r\n                    } else {\r\n                        UpdateTagIntoDb(props.tag)\r\n                    }\r\n                    getAllTags().then((tags) => {\r\n                        initTags()\r\n                    })\r\n                }}>\r\n                    {\r\n                        props.tag.id == null || props.tag.id === -1 ? \"Create\" : \"Update\"\r\n                    }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import {BaseSelectionBar} from \"../commons/BaseSelectionBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\n\r\nexport function TagSelectionBar(props: { checked: Array<number>, setChecked: (checked: Array<number>) => void, onDelete: () => void }) {\r\n    return (\r\n        <BaseSelectionBar\r\n            title={props.checked.length.toString()}\r\n            isVisible={props.checked.length > 0}\r\n            onClose={() => props.setChecked([])}\r\n        >\r\n            <IconButton onClick={props.onDelete}>\r\n                <DeleteOutline/>\r\n            </IconButton>\r\n        </BaseSelectionBar>\r\n    )\r\n}\r\n","import React, {useCallback, useRef, useState} from \"react\";\r\n\r\nfunction preventDefault(e: Event) {\r\n    if (!isTouchEvent(e)) return;\r\n\r\n    if (e.touches.length < 2 && e.preventDefault) {\r\n        e.preventDefault();\r\n    }\r\n}\r\n\r\nexport function isTouchEvent(e: Event): e is TouchEvent {\r\n    return e && \"touches\" in e;\r\n}\r\n\r\ninterface PressHandlers<T> {\r\n    onLongPress: (e: React.MouseEvent<T> | React.TouchEvent<T>) => void,\r\n    onClick?: (e: React.MouseEvent<T> | React.TouchEvent<T>) => void,\r\n}\r\n\r\ninterface Options {\r\n    delay?: number,\r\n    shouldPreventDefault?: boolean\r\n}\r\n\r\nexport default function useLongPress<T>(\r\n    {onLongPress, onClick}: PressHandlers<T>,\r\n    {delay = 300, shouldPreventDefault = true}: Options = {}) {\r\n    const [longPressTriggered, setLongPressTriggered] = useState(false);\r\n    const timeout = useRef<NodeJS.Timeout>();\r\n    const target = useRef<EventTarget>();\r\n\r\n    const start = useCallback(\r\n        (e: React.MouseEvent<T> | React.TouchEvent<T>) => {\r\n            e.persist();\r\n            const clonedEvent = {...e};\r\n\r\n            if (shouldPreventDefault && e.target) {\r\n                e.target.addEventListener(\r\n                    \"touchend\",\r\n                    preventDefault,\r\n                    {passive: false}\r\n                );\r\n                target.current = e.target;\r\n            }\r\n\r\n            timeout.current = setTimeout(() => {\r\n                onLongPress(clonedEvent);\r\n                setLongPressTriggered(true);\r\n            }, delay);\r\n        },\r\n        [onLongPress, delay, shouldPreventDefault]\r\n    );\r\n\r\n    const clear = useCallback((\r\n        e: React.MouseEvent<T> | React.TouchEvent<T>,\r\n        shouldTriggerClick = true\r\n        ) => {\r\n            timeout.current && clearTimeout(timeout.current);\r\n            shouldTriggerClick && !longPressTriggered && onClick?.(e);\r\n\r\n            setLongPressTriggered(false);\r\n\r\n            if (shouldPreventDefault && target.current) {\r\n                target.current.removeEventListener(\"touchend\", preventDefault);\r\n            }\r\n        },\r\n        [shouldPreventDefault, onClick, longPressTriggered]\r\n    );\r\n\r\n    return {\r\n        onMouseDown: (e: React.MouseEvent<T>) => start(e),\r\n        onTouchStart: (e: React.TouchEvent<T>) => start(e),\r\n        onMouseUp: (e: React.MouseEvent<T>) => clear(e),\r\n        onMouseLeave: (e: React.MouseEvent<T>) => clear(e, false),\r\n        onTouchEnd: (e: React.TouchEvent<T>) => clear(e)\r\n    };\r\n};","import {Tag} from \"../../../model/Tag\";\r\nimport React from \"react\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {LabelOutlined} from \"@material-ui/icons\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport {formatDate} from \"../../../utils/DateTimeFormatter\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\ninterface TagsListItemProps {\r\n    isSelectionMode: boolean,\r\n    isSelected: boolean,\r\n    tag: Tag,\r\n    onShowTagDialog: () => void,\r\n    onShowTagMenu: (anchor: any) => void\r\n}\r\n\r\n\r\nexport default function TagsListItem(props: TagsListItemProps) {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {props.isSelectionMode ? (\r\n                <ListItemIcon>\r\n                    <Checkbox\r\n                        edge=\"start\"\r\n                        checked={props.isSelected}\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                    />\r\n                </ListItemIcon>\r\n            ) : (\r\n                <ListItemIcon>\r\n                    <LabelOutlined/>\r\n                </ListItemIcon>\r\n            )}\r\n            <ListItemText\r\n                primary={props.tag.name}\r\n                secondary={formatDate(props.tag.createdDate)}\r\n            />\r\n            <ListItemSecondaryAction style={{marginRight: \"1em\"}}>\r\n                <IconButton edge=\"end\" aria-label=\"menu\" onClick={(e) => props.onShowTagMenu(e.currentTarget)}>\r\n                    <MoreVertIcon/>\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport TagItemMenu from \"./TagItemMenu\";\r\nimport TagDialog from \"../dialogs/TagDialog\";\r\nimport {TagSelectionBar} from \"./TagSelectionBar\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {deleteTag} from \"../../screens/Tags\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport useLongPress from \"../../../utils/useLongPress\";\r\nimport TagsListItem from \"./TagsListItem\";\r\nimport {Tag} from \"../../../model/Tag\";\r\n\r\n\r\ninterface TagsListProps {\r\n    EmptyListComponent: React.ReactNode\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tagsList: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function TagsList(props: TagsListProps) {\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const [checked, setChecked] = React.useState([] as Array<number>);\r\n\r\n    const {tags, initTags} = useStorage()\r\n\r\n    const [tagDialogOpen, setTagDialogOpen] = useState(false)\r\n    const [currentTag, setCurrentTag] = useState(new Tag(\"\"))\r\n    const [tagMenuAnchor, setTagMenuAnchor] = useState<any | null>()\r\n\r\n    useEffect(() => {\r\n        initTags()\r\n    }, [initTags])\r\n\r\n    const toggleCheckItem = (id: number) => {\r\n        let idIndex = checked.indexOf(id)\r\n        let newChecked = [...checked]\r\n\r\n        if (idIndex < 0) {\r\n            newChecked.push(id)\r\n        } else {\r\n            newChecked.splice(idIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked)\r\n    }\r\n\r\n    let longPressEvent = useLongPress({\r\n        onLongPress: (e) => {\r\n            // @ts-ignore\r\n            let id = parseInt(e.currentTarget.getAttribute(\"tagid\").trim())\r\n            if (id != null) {\r\n                toggleCheckItem(id)\r\n            }\r\n        },\r\n        onClick: (e) => {\r\n            if (checked.length > 0) {\r\n                // @ts-ignore\r\n                let id = parseInt(e.currentTarget.getAttribute(\"tagid\").trim())\r\n                if (id != null) {\r\n                    toggleCheckItem(id)\r\n                }\r\n            } else {\r\n                //todo opened tag\r\n            }\r\n        }\r\n    }, {delay: 600})\r\n\r\n    const {EmptyListComponent} = props\r\n\r\n    return (\r\n        tags.length > 0 ? (\r\n            <List className={classes.tagsList}>\r\n                {tags.filter(tag => !tag.deleted).map((tag) => {\r\n                    return (// @ts-ignore\r\n                        <ListItem key={tag.id} tagid={tag.id} dense button {...longPressEvent}>\r\n                            <TagsListItem\r\n                                isSelectionMode={checked.length > 0}\r\n                                isSelected={checked.findIndex((tagId) => {\r\n                                    return tagId === tag.id\r\n                                }) > -1}\r\n                                tag={tag}\r\n                                onShowTagDialog={() => {\r\n                                    setCurrentTag(tag)\r\n                                    setTagDialogOpen(true)\r\n                                }}\r\n                                onShowTagMenu={(anchorEl: any) => {\r\n                                    setCurrentTag(tag)\r\n                                    setTagMenuAnchor(anchorEl)\r\n                                }}\r\n                            />\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n                <TagItemMenu\r\n                    onMenuClose={() => setTagMenuAnchor(null)}\r\n                    anchorEl={tagMenuAnchor}\r\n                    tag={currentTag}\r\n                    onShowTagDialog={() => setTagDialogOpen(true)}\r\n                    onItemSelect={() => {\r\n                        if (currentTag.id != null) {\r\n                            toggleCheckItem(currentTag.id)\r\n                        }\r\n                    }}\r\n                />\r\n                <TagDialog\r\n                    tag={currentTag}\r\n                    open={tagDialogOpen}\r\n                    setOpen={setTagDialogOpen}\r\n                />\r\n                <TagSelectionBar\r\n                    checked={checked}\r\n                    setChecked={setChecked}\r\n                    onDelete={() => {\r\n                        checked.forEach(checkedId => {\r\n                            let tag = tags.find(tag => tag.id === checkedId)\r\n                            if (tag != null) {\r\n                                deleteTag(tag).then(() => initTags())\r\n                            }\r\n                        })\r\n                        setChecked([])\r\n                    }}\r\n                />\r\n            </List>\r\n        ) : (\r\n            <React.Fragment>\r\n                {EmptyListComponent}\r\n            </React.Fragment>\r\n        )\r\n    )\r\n}\r\n","import {HourglassEmpty} from \"@material-ui/icons\";\r\nimport {FunctionComponent} from \"react\";\r\nimport {createStyles, Typography} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Theme} from \"@material-ui/core/styles\";\r\n\r\ninterface EmptyListProps {\r\n    title?: string,\r\n    message?: string,\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    emptyContainer: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    emptyContent: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: 'center',\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        transform: \"translateY(-50%)\"\r\n    },\r\n    hourGlass: {\r\n        width: \"5rem\",\r\n        height: \"5rem\"\r\n    }\r\n}))\r\n\r\nconst EmptyList: FunctionComponent<EmptyListProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.emptyContainer}>\r\n            <div className={classes.emptyContent}>\r\n                <HourglassEmpty className={classes.hourGlass} color={\"secondary\"}/>\r\n                <Typography variant={\"h2\"}>{props.title}</Typography>\r\n                <Typography variant={\"body1\"} color={\"textSecondary\"}>{props.message}</Typography>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nEmptyList.defaultProps = {\r\n    title: \"There's nothing here\",\r\n    message: \"The list is empty\"\r\n}\r\n\r\nexport default EmptyList\r\n","import React from 'react';\r\nimport {AddTagIntoDb, UpdateTagIntoDb} from \"../../model/database/TagDao\";\r\nimport Content from \"../components/Content\";\r\nimport {Tag} from \"../../model/Tag\";\r\nimport {getNextId} from \"../../utils/Helpers\";\r\nimport TagCreator from \"../components/tags/TagCreator\";\r\nimport TagsList from \"../components/tags/TagsList\";\r\nimport EmptyList from \"../components/EmptyList\";\r\n\r\n\r\nexport default function Tags() {\r\n    return (\r\n        <Content>\r\n            <TagCreator/>\r\n            <TagsList\r\n                EmptyListComponent={\r\n                    <EmptyList/>\r\n                }\r\n            />\r\n        </Content>\r\n    );\r\n}\r\n\r\n\r\nexport const createTag = async (tagName: string, tags: Array<Tag>) => {\r\n    let newTag = new Tag(tagName)\r\n    newTag.id = getNextId(tags)\r\n    await AddTagIntoDb(newTag)\r\n}\r\n\r\n/**\r\n* Updates Tag To Deleted Without Removing It From Database\r\n* @param tag\r\n* @param setTags\r\n*/\r\nexport const deleteTag = async (tag: Tag) =>\r\n{\r\n    tag.deleted = true\r\n    await UpdateTagIntoDb(tag)\r\n}\r\n\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport React, {useState} from \"react\";\r\nimport {Icon, InputBase} from \"@material-ui/core\";\r\nimport {Check, LabelOutlined} from \"@material-ui/icons\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {createTag} from \"../../screens/Tags\";\r\n\r\nconst useCreatorStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        creatorRow: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\"\r\n        },\r\n        creatorIcon: {\r\n            marginLeft: \"0.8em\"\r\n        },\r\n        tagInput: {\r\n            padding: \"0.6em 1.5em\"\r\n        },\r\n        creatorBtn: {\r\n            marginRight: \"1em\"\r\n        }\r\n    }),\r\n);\r\n\r\n/**\r\n * Renders A Field For User To Type Tag Name And Create\r\n * @constructor\r\n */\r\nexport default function TagCreator() {\r\n\r\n    const classes = useCreatorStyles()\r\n\r\n    const {tags, initTags} = useStorage()\r\n    const [tagName, setTagName] = useState(\"\")\r\n\r\n    return (\r\n        <div className={classes.creatorRow}>\r\n            <Icon className={classes.creatorIcon}>\r\n                <LabelOutlined/>\r\n            </Icon>\r\n            <InputBase\r\n                fullWidth={true}\r\n                placeholder={\"Create Tag\"}\r\n                className={classes.tagInput}\r\n                value={tagName}\r\n                onChange={(x: any) => {\r\n                    setTagName(x.target.value)\r\n                }}\r\n            />\r\n            <IconButton className={classes.creatorBtn} onClick={() => {\r\n                createTag(tagName, tags).then(() => {\r\n                    setTagName(\"\")\r\n                    initTags()\r\n                })\r\n            }}>\r\n                <Check/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FunctionComponent, useEffect} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Dialog} from \"@material-ui/core\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport {Tag} from \"../../../model/Tag\";\r\nimport TagCreator from \"../tags/TagCreator\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface TagSelectionDialogProps {\r\n    isOpen: boolean,\r\n    onClose: (tags: Array<Tag>) => void,\r\n    selectedTags: Array<Tag>,\r\n    onSelectionChange?: (tags: Array<Tag>) => void,\r\n}\r\n\r\nexport const TagSelectionDialog: FunctionComponent<TagSelectionDialogProps> = (\r\n    {\r\n        isOpen,\r\n        onClose,\r\n        selectedTags,\r\n        onSelectionChange\r\n    }) => {\r\n\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = React.useState(selectedTags);\r\n\r\n    useEffect(() => {\r\n        setChecked(selectedTags)\r\n    }, [selectedTags])\r\n\r\n    const {tags} = useStorage()\r\n\r\n    const handleToggle = (tag: Tag) => () => {\r\n        const currentIndex = checked.findIndex(t => t.id === tag.id);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex < 0) {\r\n            newChecked.push(tag);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n        onSelectionChange!(newChecked)\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={isOpen}\r\n            onClose={() => onClose(checked)}\r\n            maxWidth={\"md\"}\r\n            fullWidth={false}\r\n        >\r\n            <List className={classes.root}>\r\n                <TagCreator/>\r\n                {tags.map((tag) => {\r\n\r\n                    const labelId = `checkbox-list-label-${tag.id}`;\r\n\r\n                    return (\r\n                        <ListItem key={tag.id} role={undefined} dense button onClick={handleToggle(tag)}>\r\n                            <ListItemIcon>\r\n                                <Checkbox\r\n                                    edge=\"start\"\r\n                                    checked={checked.findIndex(t => t.id === tag.id) > -1}\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    inputProps={{'aria-labelledby': labelId}}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={tag.name}/>\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    <MoreVertIcon/>\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nTagSelectionDialog.defaultProps = {\r\n    onSelectionChange: () => {\r\n\r\n    }\r\n}\r\n","import {Category} from \"../Category\";\r\nimport {db} from \"./AppDatabase\";\r\n\r\n/**\r\n * Gets All Categories From Database\r\n */\r\nexport async function getAllCategories() {\r\n    // @ts-ignore\r\n    return await db.categories.toArray()\r\n}\r\n\r\n/**\r\n * Adds a category into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function AddCategoryIntoDb(item: Category) {\r\n    // @ts-ignore\r\n    await db.categories.add(item).catch(e => {\r\n        console.warn(\"Error Category To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Adds a category into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function UpdateCategoryIntoDb(item: Category) {\r\n    // @ts-ignore\r\n    await db.categories.put(item).catch(e => {\r\n        console.warn(\"Error Category To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Deletes A Category In Database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function DeleteCategoryInDb(item: Category) {\r\n    // @ts-ignore\r\n    await db.categories.where(\"id\").equals(item.id).delete().catch((e) => {\r\n        console.warn(\"Error Deleting A Category In Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport useStorage from \"../../store/StorageProvider\";\r\nimport {Check, ChevronRight, DeleteOutline, EditOutlined, LabelOutlined} from \"@material-ui/icons\";\r\nimport Content from \"../components/Content\";\r\nimport useLongPress from \"../../utils/useLongPress\";\r\nimport {AddCategoryIntoDb} from \"../../model/database/CategoryDao\";\r\nimport {formatDate} from \"../../utils/DateTimeFormatter\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport {getNextId} from \"../../utils/Helpers\";\r\nimport {Icon, InputBase} from \"@material-ui/core\";\r\nimport {Category} from \"../../model/Category\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        categoriesList: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function Categories() {\r\n    const classes = useStyles();\r\n\r\n    const [checked, setChecked] = React.useState([] as Array<number>);\r\n\r\n    const handleToggle = (value: number) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n    };\r\n\r\n    const {categories, initCategories} = useStorage()\r\n\r\n    useEffect(() => {\r\n        initCategories()\r\n    }, [initCategories])\r\n\r\n    let toggleCheckItem = (id: number) => {\r\n        let idIndex = checked.findIndex(cid => {\r\n            return cid === id\r\n        })\r\n        if (idIndex < 0) {\r\n            setChecked([...checked, id])\r\n        } else {\r\n            let checkedArr = [...checked]\r\n            checkedArr.splice(idIndex, 1);\r\n            setChecked(checkedArr)\r\n        }\r\n    }\r\n\r\n    let longPressEvent = useLongPress({\r\n        onLongPress: (e) => {\r\n            // @ts-ignore\r\n            let id = parseInt(e.currentTarget.getAttribute(\"catid\").trim())\r\n            if (id != null) {\r\n                toggleCheckItem(id)\r\n            }\r\n        },\r\n        onClick: (e) => {\r\n            if (checked.length > 0) {\r\n                // @ts-ignore\r\n                let id = parseInt(e.currentTarget.getAttribute(\"catid\").trim())\r\n                if (id != null) {\r\n                    toggleCheckItem(id)\r\n                }\r\n            } else {\r\n                //todo opened category\r\n            }\r\n        }\r\n    }, {delay: 600})\r\n\r\n    return (\r\n        <Content>\r\n            <CategoryCreator/>\r\n            <List className={classes.categoriesList}>\r\n                {categories.map((category) => {\r\n                    return (// @ts-ignore\r\n                        <ListItem key={category.id} role={undefined} catid={category.id} dense\r\n                                  button {...longPressEvent} >\r\n                            {checked.length > 0 ? (\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        edge=\"start\"\r\n                                        checked={checked.findIndex((categoryId) => {\r\n                                            return categoryId === category.id\r\n                                        }) > -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                    />\r\n                                </ListItemIcon>\r\n                            ) : (\r\n                                <ListItemIcon>\r\n                                    <ChevronRight/>\r\n                                </ListItemIcon>\r\n                            )}\r\n                            <ListItemText\r\n                                primary={category.name}\r\n                                secondary={formatDate(category.createdDate)}\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    <DeleteOutline/>\r\n                                </IconButton>\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    <EditOutlined/>\r\n                                </IconButton>\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    <MoreVertIcon/>\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </Content>\r\n    );\r\n}\r\n\r\n\r\nconst useCreatorStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        creatorRow: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\"\r\n        },\r\n        creatorIcon: {\r\n            marginLeft: \"0.8em\"\r\n        },\r\n        categoryInput: {\r\n            padding: \"0.6em 1.5em\"\r\n        },\r\n        creatorBtn: {\r\n            marginRight: \"1em\"\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nexport function CategoryCreator() {\r\n\r\n    const classes = useCreatorStyles()\r\n\r\n    const {categories, initCategories} = useStorage()\r\n    const [categoryName, setCategoryName] = useState(\"\")\r\n\r\n    const createCategory = () => {\r\n        let newCategory = new Category(categoryName)\r\n        newCategory.id = getNextId(categories)\r\n        AddCategoryIntoDb(newCategory).then(() => {\r\n            initCategories()\r\n        }).then(() => {\r\n            setCategoryName(\"\")\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.creatorRow}>\r\n            <Icon className={classes.creatorIcon}>\r\n                <LabelOutlined/>\r\n            </Icon>\r\n            <InputBase\r\n                fullWidth={true}\r\n                placeholder={\"Create Category\"}\r\n                className={classes.categoryInput}\r\n                value={categoryName}\r\n                onChange={(x: any) => {\r\n                    setCategoryName(x.target.value)\r\n                }}\r\n            />\r\n            <IconButton className={classes.creatorBtn} onClick={createCategory}>\r\n                <Check/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FunctionComponent, useEffect, useState} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Dialog, Radio} from \"@material-ui/core\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport {Category} from \"../../../model/Category\";\r\nimport {CategoryCreator} from \"../../screens/Categories\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface CategorySelectionDialogProps {\r\n    isOpen: boolean,\r\n    onClose: (category: Category) => void,\r\n    activeCategory: Category | null,\r\n    onSelectionChange?: (category: Category) => void,\r\n}\r\n\r\nexport const CategorySelectionDialog: FunctionComponent<CategorySelectionDialogProps> = (\r\n    {\r\n        isOpen,\r\n        onClose,\r\n        activeCategory,\r\n        onSelectionChange\r\n    }) => {\r\n\r\n    const classes = useStyles();\r\n    const [selectedCategory, setSelectedCategory] = useState(new Category(\"Uncategorized\"))\r\n\r\n    useEffect(() => {\r\n        setSelectedCategory(activeCategory != null ? activeCategory : new Category(\"Uncategorized\"))\r\n    }, [activeCategory])\r\n\r\n    const {categories} = useStorage()\r\n\r\n    return (\r\n        <Dialog\r\n            open={isOpen}\r\n            onClose={() => onClose(selectedCategory)}\r\n            maxWidth={\"md\"}\r\n            fullWidth={false}\r\n        >\r\n            <List className={classes.root}>\r\n                <CategoryCreator/>\r\n                {[new Category(\"Uncategorized\"), ...categories].map((category) => {\r\n                    const labelId = `checkbox-list-label-${category.id}`;\r\n\r\n                    return (\r\n                        <ListItem key={category.id} role={undefined} dense button\r\n                                  onClick={() => {\r\n                                      setSelectedCategory(category)\r\n                                      onSelectionChange!(category)\r\n                                  }}>\r\n                            <ListItemIcon>\r\n                                <Radio\r\n                                    edge=\"start\"\r\n                                    checked={selectedCategory.id === category.id}\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    inputProps={{'aria-labelledby': labelId}}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={category.name}/>\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    <MoreVertIcon/>\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nCategorySelectionDialog.defaultProps = {\r\n    onSelectionChange: () => {\r\n\r\n    }\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Dialog, IconButton} from \"@material-ui/core\";\r\nimport useAppState from \"../../../store/AppStateProvider\";\r\nimport {ThemeType} from \"../../Themes\";\r\nimport {darkColorsList, lightColorsList} from \"../../../utils/Helpers\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        colorRow: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n            padding: \"1rem\"\r\n        },\r\n        colorNode: {\r\n            width: \"3rem\",\r\n            height: \"3rem\",\r\n            borderRadius: \"50%\",\r\n            margin: \"0.4rem\",\r\n            cursor: \"pointer\"\r\n        },\r\n        activeColor: {\r\n            border: \"2px solid \" + theme.palette.text.primary\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ColorDialogProps {\r\n    isOpen: boolean,\r\n    onClose: () => void,\r\n    activeColorIndex: number,\r\n    onSelectionChange: (colorIndex: number, color: string) => void\r\n}\r\n\r\nexport const ColorDialog = (props: ColorDialogProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const {themeType} = useAppState()\r\n\r\n    const [colorIndex, setColorIndex] = useState(props.activeColorIndex)\r\n\r\n    useEffect(() => {\r\n        setColorIndex(props.activeColorIndex)\r\n    }, [props.activeColorIndex])\r\n\r\n    let colorsList\r\n    if (themeType === ThemeType.Light) {\r\n        colorsList = lightColorsList\r\n    } else {\r\n        colorsList = darkColorsList\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.isOpen}\r\n            onClose={props.onClose}\r\n            maxWidth={\"xs\"}\r\n            fullWidth={false}\r\n        >\r\n            <div className={classes.colorRow}>\r\n                {colorsList.map((color, index) => {\r\n                    return (\r\n                        <IconButton\r\n                            key={color}\r\n                            className={`${classes.colorNode} ${index === colorIndex ? classes.activeColor : \"\"}`}\r\n                            style={{background: color}}\r\n                            onClick={() => {\r\n                                setColorIndex(index)\r\n                                props.onSelectionChange(index, color)\r\n                            }}\r\n                        >\r\n                        </IconButton>\r\n                    )\r\n                })}\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, {FunctionComponent, useEffect, useMemo, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {UpdateNoteIntoDb} from \"../../../model/database/NoteDao\";\r\nimport {MindMap} from \"../../../model/MindMap\";\r\nimport {createStyles, Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport {UpdateMindMapIntoDb} from \"../../../model/database/MindMapDao\";\r\nimport {Note} from \"../../../model/Note\";\r\nimport MainCard from \"./MainCard/MainCard\";\r\nimport {Theme} from \"@material-ui/core/styles\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport {getSectionedList, SectionFilter, SectionItem} from \"../../../utils/MainItemHelper\";\r\nimport StaggeredGrid from \"../commons/StaggeredGrid/StaggeredGrid\";\r\nimport StaggeredGridItem from \"../commons/StaggeredGrid/StaggeredGridItem\";\r\nimport {StaggeredItemSpan} from \"../commons/StaggeredGrid/StaggeredGridModel\";\r\nimport {MainSelectionBar} from \"./MainSelectionBar\";\r\nimport {TagSelectionDialog} from \"../dialogs/TagSelectionDialog\";\r\nimport {CategorySelectionDialog} from \"../dialogs/CategorySelectionDialog\";\r\nimport {ColorDialog} from \"../dialogs/ColorDialog\";\r\nimport {Category} from \"../../../model/Category\";\r\nimport {Tag} from \"../../../model/Tag\";\r\nimport {Check, DeleteOutline, RestoreOutlined, Share} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        menuItem: {\r\n            padding: \"0 0.8em\"\r\n        },\r\n        itemGrid: {\r\n            padding: \"2em 0em\"\r\n        },\r\n        itemCard: {\r\n            padding: '0.5em 0.5em'\r\n        },\r\n        sectionItem: {\r\n            padding: \"1em 1em\",\r\n        },\r\n    })\r\n)\r\n\r\ntype MainListProps = {\r\n    mainFilter?: SectionFilter\r\n    filters?: Array<SectionFilter>\r\n    onDelete?: (item: Note | MindMap) => void,\r\n    EmptyListComponent: React.ReactNode,\r\n}\r\n\r\nexport const MainList: FunctionComponent<MainListProps> = (props) => {\r\n\r\n    let classes = useStyles()\r\n    const {notes, initNotes, mindmaps, initMindMaps} = useStorage()\r\n    let [checked, setChecked] = React.useState<Array<Note | MindMap>>([])\r\n    let [colorDialog, setColorDialog] = useState(false)\r\n    let [tagSelectionDialog, setTagSelectionDialog] = useState(false)\r\n    let [categorySelectionDialog, setCategorySelectionDialog] = useState(false)\r\n\r\n    //Loading Data In Case Updated\r\n    useEffect(() => {\r\n        initNotes()\r\n        initMindMaps()\r\n    }, [initMindMaps, initNotes])\r\n\r\n    //Preparing List , Filtering , Sorting , Sectioning\r\n    let items: Array<Note | MindMap | SectionItem> = useMemo(() => {\r\n        return getSectionedList(notes, mindmaps, props.mainFilter!, props.filters)\r\n    }, [notes, mindmaps, props.mainFilter, props.filters])\r\n\r\n\r\n    //States\r\n    const [anchorMenu, setAnchorMenu] = useState<any | null>(null);\r\n    const [actionItem, setActionItem] = useState<Note | MindMap | null>(null)\r\n    const [actionItemTags, setActionItemTags] = useState<Array<Tag>>([])\r\n    const [actionItemCategory, setActionItemCategory] = useState<Category | null>(new Category(\"\"))\r\n\r\n    //Functions\r\n    const onMenuOpen = (target: any, item: Note | MindMap) => {\r\n        setAnchorMenu(target);\r\n        setActionItem(item)\r\n    };\r\n\r\n    const onMenuClose = () => {\r\n        setAnchorMenu(null)\r\n        setActionItem(null)\r\n    }\r\n\r\n    const updateList = (item: Note | MindMap | null) => {\r\n        if (item == null || item instanceof Note) {\r\n            initNotes()\r\n        }\r\n        if (item == null || item instanceof MindMap) {\r\n            initMindMaps()\r\n        }\r\n    }\r\n\r\n    const updateListFor = (items: Array<Note | MindMap>) => {\r\n        if (items.length > 0) {\r\n            if (items.length === 1) {\r\n                updateList(items[0])\r\n            } else {\r\n                initNotes()\r\n                initMindMaps()\r\n            }\r\n        }\r\n        setChecked([])\r\n    }\r\n\r\n    const toggleItem = (item: Note | MindMap) => {\r\n        let index = checked.indexOf(item)\r\n        let newChecked = [...checked]\r\n\r\n        if (index < 0) {\r\n            newChecked.push(item)\r\n        } else {\r\n            newChecked.splice(index, 1)\r\n        }\r\n\r\n        setChecked(newChecked)\r\n    }\r\n\r\n    const {EmptyListComponent} = props\r\n\r\n    return (\r\n        items.length > 0 ? (\r\n            <React.Fragment>\r\n                <StaggeredGrid\r\n                    className={classes.itemGrid}\r\n                    items={items}\r\n                    render={(item: Note | MindMap | SectionItem, index) => {\r\n\r\n                        let itemKey;\r\n                        if (item instanceof Note) {\r\n                            itemKey = \"n\" + item.id\r\n                        } else if (item instanceof MindMap) {\r\n                            itemKey = \"m\" + item.id\r\n                        } else {\r\n                            itemKey = \"s\" + item.title\r\n                        }\r\n\r\n                        if (item instanceof SectionItem) {\r\n                            return (\r\n                                <StaggeredGridItem index={index} key={itemKey} spans={StaggeredItemSpan.Full}>\r\n                                    <div className={classes.sectionItem}>\r\n                                        <Typography variant={\"caption\"}>\r\n                                            {item.title}\r\n                                        </Typography>\r\n                                    </div>\r\n                                </StaggeredGridItem>\r\n                            )\r\n\r\n                        } else {\r\n                            return (<StaggeredGridItem index={index} key={itemKey}>\r\n                                <div className={classes.itemCard}>\r\n                                    <MainCard\r\n                                        item={item}\r\n                                        isSelected={checked.indexOf(item) > -1}\r\n                                        openOnClick={true}\r\n                                        onMenuOpen={onMenuOpen}\r\n                                        onSelectDeselect={() => {\r\n                                            toggleItem(item)\r\n                                        }}\r\n                                        onArchiveUnarchive={(item) => {\r\n                                            archiveUnarchiveItem(item).then(() => updateList(item))\r\n                                            onMenuClose()\r\n                                        }}\r\n                                        onPinUnpin={(item) => {\r\n                                            pinUnpinItem(item).then(() => updateList(item))\r\n\r\n                                        }}\r\n                                        onTag={(item, tags) => {\r\n                                            setActionItem(item)\r\n                                            setActionItemTags(tags)\r\n                                            setTagSelectionDialog(true)\r\n                                        }}\r\n                                        onCategorize={(item, category) => {\r\n                                            setActionItem(item)\r\n                                            setActionItemCategory(category)\r\n                                            setCategorySelectionDialog(true)\r\n                                        }}\r\n                                        onColor={(item) => {\r\n                                            setActionItem(item)\r\n                                            setColorDialog(true)\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </StaggeredGridItem>)\r\n                        }\r\n                    }}\r\n                />\r\n                <MainSelectionBar\r\n                    checked={checked}\r\n                    setChecked={setChecked}\r\n                    showPinUnpin={true}\r\n                    showArchiveUnArchive={true}\r\n                    onArchiveUnArchive={() => {\r\n                        checked.forEach(archiveUnarchiveItem)\r\n                        updateList(null)\r\n                        setChecked([])\r\n                    }}\r\n                    onCategorize={() => {\r\n                        setCategorySelectionDialog(true)\r\n                    }}\r\n                    onPinUnPin={() => {\r\n                        checked.forEach(pinUnpinItem)\r\n                        updateList(null)\r\n                        setChecked([])\r\n                    }}\r\n                    onTag={() => {\r\n                        setTagSelectionDialog(true)\r\n                    }}\r\n                    onDelete={() => {\r\n                        checked.forEach(removeItem)\r\n                        updateList(null)\r\n                        setChecked([])\r\n                    }}\r\n                />\r\n\r\n                <ColorDialog\r\n                    isOpen={colorDialog}\r\n                    onClose={() => setColorDialog(false)}\r\n                    activeColorIndex={actionItem?.colorIndex == null ? 0 : actionItem?.colorIndex}\r\n                    onSelectionChange={(index, color) => {\r\n                        if (actionItem != null) {\r\n                            actionItem.colorIndex = index\r\n                            updateItem(actionItem).then(() => updateList(actionItem))\r\n\r\n                        }\r\n                    }}\r\n                />\r\n                <TagSelectionDialog\r\n                    isOpen={tagSelectionDialog}\r\n                    onClose={(tags) => {\r\n                        setTagSelectionDialog(false)\r\n                        let affected = getAffected(checked, actionItem)\r\n                        affected.forEach(item => {\r\n                            item.tags = tags.filter(tag => tag.id != null).map(tag => tag.id!)\r\n                            updateItem(item)\r\n                        })\r\n                        updateListFor(affected)\r\n                    }}\r\n                    selectedTags={actionItemTags}\r\n                />\r\n                <CategorySelectionDialog\r\n                    isOpen={categorySelectionDialog}\r\n                    onClose={(category) => {\r\n                        setCategorySelectionDialog(false)\r\n                        let affected = getAffected(checked, actionItem)\r\n                        affected.forEach(item => {\r\n                            if (category.id != null) {\r\n                                item.categoryId = category.id\r\n                                updateItem(item)\r\n                            }\r\n                        })\r\n                        updateListFor(affected)\r\n                    }}\r\n                    activeCategory={actionItemCategory}\r\n                />\r\n\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorMenu}\r\n                    keepMounted\r\n                    open={Boolean(anchorMenu)}\r\n                    onClose={() => setAnchorMenu(null)}\r\n                >\r\n                    <MenuItem onClick={() => {\r\n                        if (actionItem != null) {\r\n                            toggleItem(actionItem)\r\n                            onMenuClose()\r\n                        }\r\n                    }}>\r\n                        <Check fontSize={\"small\"}/>\r\n                        <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                            Select\r\n                        </Typography>\r\n                    </MenuItem>\r\n                    <MenuItem onClick={() => {\r\n                    }}>\r\n                        <Share fontSize={\"small\"}/>\r\n                        <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                            Share\r\n                        </Typography>\r\n                    </MenuItem>\r\n                    {\r\n                        actionItem != null && !actionItem.deleted ? (\r\n                            <MenuItem onClick={() => {\r\n                                if (actionItem != null) {\r\n                                    if (props.onDelete != null) {\r\n                                        props.onDelete(actionItem!)\r\n                                    } else {\r\n                                        removeItem(actionItem!)\r\n                                    }\r\n                                    updateList(actionItem!)\r\n                                    onMenuClose()\r\n                                }\r\n                            }}>\r\n                                <DeleteOutline fontSize={\"small\"}/>\r\n                                <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                                    Delete\r\n                                </Typography>\r\n                            </MenuItem>\r\n                        ) : (\r\n                            <div>\r\n                                <MenuItem onClick={() => {\r\n                                    if (actionItem != null) {\r\n                                        restoreItem(actionItem!)\r\n                                        updateList(actionItem!)\r\n                                        onMenuClose()\r\n                                    }\r\n                                }}>\r\n                                    <RestoreOutlined fontSize={\"small\"}/>\r\n                                    <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                                        Restore\r\n                                    </Typography>\r\n                                </MenuItem>\r\n                                <MenuItem onClick={() => {\r\n                                    if (actionItem != null) {\r\n                                        removeItem(actionItem!)\r\n                                        updateList(actionItem!)\r\n                                        onMenuClose()\r\n                                    }\r\n                                }}>\r\n                                    <DeleteOutline fontSize={\"small\"}/>\r\n                                    <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                                        Delete Permanently\r\n                                    </Typography>\r\n                                </MenuItem>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Menu>\r\n            </React.Fragment>\r\n        ) : (\r\n            <React.Fragment>\r\n                {EmptyListComponent}\r\n            </React.Fragment>\r\n        )\r\n\r\n    );\r\n}\r\n\r\nMainList.defaultProps = {\r\n    mainFilter: {}\r\n}\r\n\r\n//-----Helper Functions\r\nfunction getAffected(checked: Array<Note | MindMap>, actionItem: Note | MindMap | null) {\r\n    let affected: Array<Note | MindMap> = []\r\n    if (checked.length === 0) {\r\n        if (actionItem != null) {\r\n            affected = [actionItem]\r\n        }\r\n    } else {\r\n        affected = [...checked]\r\n    }\r\n    return affected\r\n}\r\n\r\n//-----Item Actions\r\n\r\nexport async function updateItem(item: Note | MindMap) {\r\n    if (item instanceof Note) {\r\n        return await UpdateNoteIntoDb(item)\r\n    } else {\r\n        return await UpdateMindMapIntoDb(item)\r\n    }\r\n}\r\n\r\nexport async function restoreItem(item: Note | MindMap) {\r\n    item.deleted = false\r\n    item.archived = false\r\n    updateItem(item)\r\n}\r\n\r\nexport async function removeItem(item: Note | MindMap) {\r\n    if (!item.deleted) {\r\n        item.deleted = true\r\n    } else {\r\n        item.permanentlyDeleted = true\r\n    }\r\n    updateItem(item)\r\n}\r\n\r\n\r\nexport async function pinUnpinItem(item: Note | MindMap) {\r\n    item.pinned = !item.pinned\r\n    updateItem(item)\r\n}\r\n\r\nexport async function archiveUnarchiveItem(item: Note | MindMap) {\r\n    item.archived = !item.archived\r\n    updateItem(item)\r\n}\r\n","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {SpeedDial, SpeedDialAction, SpeedDialIcon} from '@material-ui/lab';\r\nimport {MapOutlined, NoteAddOutlined} from \"@material-ui/icons\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        speedDial: {\r\n            position: 'fixed',\r\n            bottom: theme.spacing(4),\r\n            right: theme.spacing(4),\r\n        },\r\n    }),\r\n);\r\n\r\nconst actions = [\r\n    {\r\n        icon: (\r\n            <Link to={\"/mindmap\"} style={{marginTop: '6px'}}>\r\n                <MapOutlined/>\r\n            </Link>\r\n        ),\r\n        name: 'MindMap'\r\n    },\r\n    {\r\n        icon: (\r\n            <Link to={\"/note\"} style={{marginTop: '6px'}}>\r\n                <NoteAddOutlined/>\r\n            </Link>\r\n        ),\r\n        name: 'Note'\r\n    },\r\n];\r\n\r\nexport default function CreateFab() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [hidden, setHidden] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <SpeedDial\r\n            ariaLabel=\"SpeedDial tooltip example\"\r\n            className={classes.speedDial}\r\n            hidden={hidden}\r\n            icon={<SpeedDialIcon/>}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            open={open}\r\n        >\r\n            {actions.map((action) => (\r\n                <SpeedDialAction\r\n                    key={action.name}\r\n                    icon={action.icon}\r\n                    tooltipTitle={action.name}\r\n                    tooltipOpen\r\n                    onClick={handleClose}\r\n                />\r\n            ))}\r\n        </SpeedDial>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Content from \"../components/Content\";\r\nimport {MainList} from \"../components/MainItem/MainList\";\r\nimport CreateFab from \"../components/commons/CreateFab\";\r\nimport EmptyList from \"../components/EmptyList\";\r\n\r\nexport default function Main() {\r\n    return (\r\n        <Content>\r\n            <MainList\r\n                mainFilter={{\r\n                    isDeleted: false,\r\n                    isPermanentlyDeleted: false,\r\n                    isArchived: false\r\n                }}\r\n                filters={[\r\n                    {\r\n                        name: \"Pinned\",\r\n                        isPinned: true\r\n                    },\r\n                    {\r\n                        name: \"Others\",\r\n                        isPinned: false\r\n                    }]}\r\n                EmptyListComponent={\r\n                    <EmptyList/>\r\n                }\r\n            />\r\n            <CreateFab/>\r\n        </Content>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport type User = {\r\n    photoURL: string,\r\n    displayName: string,\r\n    email: string\r\n}\r\n\r\nexport type UserProps = {\r\n    user: User | null,\r\n    setUser: (user: User | null) => void\r\n}\r\n\r\nconst defaultUser = {\r\n    user: null,\r\n    setUser: (user: User | null) => {\r\n    },\r\n};\r\n\r\nexport const UserContext = React.createContext<UserProps>(defaultUser);\r\n\r\nexport function UserProvider(props: { user: UserProps, children: any }) {\r\n    return (\r\n        <UserContext.Provider value={props.user}>\r\n            {props.children}\r\n        </UserContext.Provider>\r\n    );\r\n}\r\n\r\nexport default function useUser() {\r\n    let context = React.useContext(UserContext);\r\n    if (context == null) {\r\n        throw new Error(\"User Context outside provider\");\r\n    }\r\n    return context;\r\n}\r\n","import {initializeApp} from \"firebase/app\";\r\nimport {getAuth, GoogleAuthProvider, signInWithCredential} from \"@firebase/auth\";\r\nimport {getAnalytics} from \"@firebase/analytics\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB_J9dH-BPa5zotdaBL9Ns7vGjF8oml_Fg\",\r\n    authDomain: \"timeline-app-1615725283013.firebaseapp.com\",\r\n    projectId: \"timeline-app-1615725283013\",\r\n    storageBucket: \"timeline-app-1615725283013.appspot.com\",\r\n    messagingSenderId: \"319843936727\",\r\n    appId: \"1:319843936727:web:4f8783189a1c3f802c0392\",\r\n    measurementId: \"G-L14KR4L56S\",\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\n//Initializing Analytics\r\nconst analytics = getAnalytics();\r\n\r\n//Firebase Auth\r\nconst auth = getAuth();\r\nauth.useDeviceLanguage();\r\n\r\n\r\nexport function signInWithToken(idToken: string, accessToken: string) {\r\n    signInWithCredential(auth, GoogleAuthProvider.credential(idToken, accessToken))\r\n}\r\n\r\nexport function firebaseSignOut() {\r\n    auth.signOut()\r\n}\r\n\r\n/**\r\n * Listens for User SignIn State Changes From Firebase\r\n * @param callback\r\n * @returns {*}\r\n */\r\n// @ts-ignore\r\nexport function onAuthStateChanged(callback: (user: firebase.User) => void) {\r\n    return auth.onAuthStateChanged((user) => {\r\n        if (user != null) {\r\n            callback(user);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default firebaseApp;\r\n","import {SyncFile} from \"../model/SyncFile\";\r\nimport {resolveType} from \"./SyncHelper\";\r\n\r\n\r\nfunction convertToSyncFile(obj: { id: string; name: string; properties: any; }): SyncFile {\r\n    const props = obj.properties\r\n    return {\r\n        id: obj.id,\r\n        name: obj.name,\r\n        type: resolveType(props.type),\r\n        createdDate: parseInt(props.createdTime),\r\n        editedDate: parseInt(props.modifiedTime),\r\n        deletedDate: props.deletedTime === \"null\" || props.deletedTime.length === 0 ? null : parseInt(props.deletedTime),\r\n        isDeleted: props.isDeleted === \"true\",\r\n    } as SyncFile\r\n}\r\n\r\nexport async function getFilesList() {\r\n    try {\r\n        // @ts-ignore\r\n        return window.gapi.client.drive.files.list({\r\n            \"kind\": \"drive#fileList\",\r\n            \"incompleteSearch\": false,\r\n            \"spaces\": [\"appDataFolder\"],\r\n            'fields': \"nextPageToken, files(id, name,properties)\",\r\n            \"files\": []\r\n        }).then(function (response: { result: { files: any; }; }) {\r\n            const files = response.result.files;\r\n            // console.log(files) files list retrieved from cloud\r\n            return files.map((file: { id: string; name: string; properties: any; }) => {\r\n                return convertToSyncFile(file)\r\n            })\r\n        });\r\n    } catch (e) {\r\n        console.log(e)\r\n        return []\r\n    }\r\n}\r\n\r\nexport async function getFileFromCloud(file: SyncFile) {\r\n    try {\r\n        // @ts-ignore\r\n        return window.gapi.client.drive.files.get({\r\n            fileId: file.id,\r\n            alt: \"media\"\r\n        }).then((resp: any) => {\r\n            console.warn(resp)\r\n            return resp.result\r\n        });\r\n    } catch (e) {\r\n        console.log(e)\r\n        return null\r\n    }\r\n}\r\n\r\nexport async function uploadJsonToCloud(\r\n    syncFile: SyncFile,\r\n    json: string,\r\n) {\r\n    try {\r\n        let fileData = {\r\n            resource: {\r\n                name: syncFile.name,\r\n                mimeType: \"application/json\",\r\n                media: {\r\n                    mediaType: \"application/json\",\r\n                    body: json\r\n                },\r\n                fields: 'id',\r\n                parents: [\"appDataFolder\"],\r\n                properties: {\r\n                    \"type\": syncFile.type,\r\n                    \"createdTime\": syncFile.createdDate.toString(),\r\n                    \"modifiedTime\": syncFile.editedDate.toString(),\r\n                    \"deletedTime\": (syncFile.deletedDate || \"null\").toString(),\r\n                    \"isDeleted\": syncFile.isDeleted ? \"true\" : \"false\",\r\n                }\r\n            }\r\n        }\r\n        if (syncFile.id == null || syncFile.id === \"\") {\r\n            // @ts-ignore\r\n            return window.gapi.client.drive.files.create(fileData).then((resp: any) => {\r\n                console.log(\"Created File\")\r\n                console.log(resp)\r\n                return resp\r\n            })\r\n        } else {\r\n            // @ts-ignore\r\n            return window.gapi.client.drive.files.put(fileData).then((resp: any) => {\r\n                console.log(\"Updated File\")\r\n                console.log(resp)\r\n                return resp\r\n            })\r\n        }\r\n    } catch (e) {\r\n        return null\r\n    }\r\n}\r\n","import {db} from \"./AppDatabase\";\r\nimport {Reminder} from \"../Reminder\";\r\n\r\n/**\r\n * Gets All Reminders From Database\r\n */\r\nexport async function getAllReminders() {\r\n    // @ts-ignore\r\n    return await db.reminders.toArray()\r\n}\r\n\r\n/**\r\n * Adds a reminder into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function AddReminderIntoDb(item: Reminder) {\r\n    // @ts-ignore\r\n    await db.reminders.add(item).catch(e => {\r\n        console.warn(\"Error Adding Reminder To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Adds a reminder into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport async function UpdateReminderIntoDb(item: Reminder) {\r\n    // @ts-ignore\r\n    await db.reminders.put(item).catch(e => {\r\n        console.warn(\"Error Adding Reminder To Db\")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}","import {db} from \"./AppDatabase\";\r\n\r\n/**\r\n * Adds a attachment into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport function AddAttachmentIntoDb(item: any) { //todo replace with Attachment Type\r\n    // @ts-ignore\r\n    db.attachments.add(item).catch(e => {\r\n        console.warn(\"Error Adding Attachment To Db \")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}\r\n\r\n/**\r\n * Adds a attachment into database\r\n * @param item\r\n * @constructor\r\n */\r\nexport function UpdateAttachmentIntoDb(item: any) { //todo replace with Attachment Type\r\n    // @ts-ignore\r\n    db.attachments.put(item).catch(e => {\r\n        console.warn(\"Error Adding Attachment To Db \")\r\n        console.log(e)\r\n        console.log(item)\r\n    })\r\n}","import {SyncFile, SyncFileType} from \"../model/SyncFile\";\r\nimport {DeleteFileFromDb, getFileFromDb} from \"../model/database/AppDatabase\";\r\nimport {getFileFromCloud, getFilesList, uploadJsonToCloud} from \"./DriveHelper\";\r\nimport {Note} from \"../model/Note\";\r\nimport {MindMap} from \"../model/MindMap\";\r\nimport {Category} from \"../model/Category\";\r\nimport {Tag} from \"../model/Tag\";\r\nimport {AddNoteIntoDb, getAllNotes, UpdateNoteIntoDb} from \"../model/database/NoteDao\";\r\nimport {AddMindMapIntoDb, getAllMindMaps, UpdateMindMapIntoDb} from \"../model/database/MindMapDao\";\r\nimport {AddReminderIntoDb, getAllReminders, UpdateReminderIntoDb} from \"../model/database/ReminderDao\";\r\nimport {AddCategoryIntoDb, getAllCategories, UpdateCategoryIntoDb} from \"../model/database/CategoryDao\";\r\nimport {AddTagIntoDb, getAllTags, UpdateTagIntoDb} from \"../model/database/TagDao\";\r\nimport {AddAttachmentIntoDb, UpdateAttachmentIntoDb} from \"../model/database/AttachmentDao\";\r\nimport {Reminder} from \"../model/Reminder\";\r\n\r\nexport function resolveType(type: string): SyncFileType {\r\n    switch (type) {\r\n        case \"Note\":\r\n            return SyncFileType.Note\r\n        case \"MindMap\":\r\n            return SyncFileType.MindMap\r\n        case \"Reminder\":\r\n            return SyncFileType.Reminder\r\n        case \"Category\":\r\n            return SyncFileType.Reminder\r\n        case \"Tag\":\r\n            return SyncFileType.Tag\r\n        case \"AttachmentRecord\":\r\n            return SyncFileType.AttachmentRecord\r\n        case \"Attachment\":\r\n            return SyncFileType.Attachment\r\n        default:\r\n            console.warn(\"Unknown file type found\")\r\n            return SyncFileType.Unknown\r\n    }\r\n}\r\n\r\nexport function convertItemToSyncFile(item: Note | MindMap | Reminder | Category | Tag): SyncFile { // todo attachment record sync file\r\n    let itemType = item instanceof Note ? SyncFileType.Note :\r\n        item instanceof MindMap ? SyncFileType.MindMap :\r\n            item instanceof Reminder ? SyncFileType.Reminder :\r\n                item instanceof Category ? SyncFileType.Category : SyncFileType.Tag\r\n    // item instanceof Attachment ? SyncFileType.AttachmentRecord : ; //todo attachment type\r\n\r\n    let itemName = (item instanceof Note || item instanceof MindMap) ? item.title :\r\n        (item instanceof Reminder || item instanceof Category || item instanceof Tag) ? item.name : \"\"\r\n\r\n    let isDeleted = (item instanceof Note || item instanceof MindMap) ? item.deleted && item.permanentlyDeleted : item.deleted\r\n\r\n    return {\r\n        createdDate: item.createdDate,\r\n        deletedDate: item.deletedDate,\r\n        editedDate: item.editedDate,\r\n        id: item.cloudId,\r\n        isDeleted: isDeleted,\r\n        name: itemName,\r\n        type: itemType\r\n    }\r\n}\r\n\r\n/**\r\n * Starts Sync From Google Drive To IndexedDb\r\n */\r\nexport async function startDownloadSync() {\r\n    try {\r\n        const files = await getFilesList()\r\n        files.forEach((file: SyncFile) => {\r\n            getFileFromDb(file).then(async (resp: any) => {\r\n                let isPresent = resp != null\r\n                let isUpdated = (resp != null && resp.editedDate != null && resp.editedDate >= file.editedDate)\r\n                if (!isPresent || !isUpdated) { //Note does not exist in db\r\n\r\n                    //Downloading from cloud\r\n                    let data = await getFileFromCloud(file)\r\n\r\n                    //Saving Into Db\r\n                    if (data != null && data) {\r\n\r\n                        data.cloudId = file.id\r\n\r\n                        switch (file.type) {\r\n                            case SyncFileType.Note:\r\n                                // @ts-ignore\r\n                                if (!isPresent) {\r\n                                    AddNoteIntoDb(data)\r\n                                } else if (isPresent && !isUpdated) {\r\n                                    if (file.isDeleted) {\r\n                                        DeleteFileFromDb(file)\r\n                                    } else {\r\n                                        UpdateNoteIntoDb(data)\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case SyncFileType.MindMap:\r\n                                // @ts-ignore\r\n                                if (!isPresent) {\r\n                                    AddMindMapIntoDb(data)\r\n                                } else if (isPresent && !isUpdated) {\r\n                                    if (file.isDeleted) {\r\n                                        DeleteFileFromDb(file)\r\n                                    } else {\r\n                                        UpdateMindMapIntoDb(data)\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case SyncFileType.Reminder:\r\n                                // @ts-ignore\r\n                                if (!isPresent) {\r\n                                    AddReminderIntoDb(data)\r\n                                } else if (isPresent && !isUpdated) {\r\n                                    if (file.isDeleted) {\r\n                                        DeleteFileFromDb(file)\r\n                                    } else {\r\n                                        UpdateReminderIntoDb(data)\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case SyncFileType.Category:\r\n                                // @ts-ignore\r\n                                if (!isPresent) {\r\n                                    AddCategoryIntoDb(data)\r\n                                } else if (isPresent && !isUpdated) {\r\n                                    if (file.isDeleted) {\r\n                                        DeleteFileFromDb(file)\r\n                                    } else {\r\n                                        UpdateCategoryIntoDb(data)\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case SyncFileType.Tag:\r\n                                // @ts-ignore\r\n                                if (!isPresent) {\r\n                                    AddTagIntoDb(data)\r\n                                } else if (isPresent && !isUpdated) {\r\n                                    if (file.isDeleted) {\r\n                                        DeleteFileFromDb(file)\r\n                                    } else {\r\n                                        UpdateTagIntoDb(data)\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case SyncFileType.AttachmentRecord:\r\n                                // @ts-ignore\r\n                                if (!isPresent) {\r\n                                    AddAttachmentIntoDb(data)\r\n                                } else if (isPresent && !isUpdated) {\r\n                                    if (file.isDeleted) {\r\n                                        DeleteFileFromDb(file)\r\n                                    } else {\r\n                                        UpdateAttachmentIntoDb(data)\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                console.warn(\"Unkown File Type Found\")\r\n                        }\r\n                    } else {\r\n                        console.warn(\"Requested file data invalid\", resp, data)\r\n                    }\r\n                } else {\r\n                    console.log(\"found updated record in db\")\r\n                }\r\n            })\r\n        })\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport async function startUploadSync() {\r\n    let filesList = await getFilesList()\r\n    let notes = await getAllNotes()\r\n    let mindmaps = await getAllMindMaps()\r\n    let reminders = await getAllReminders()\r\n    let categories = await getAllCategories()\r\n    let tags = await getAllTags()\r\n\r\n    await uploadItems(filesList, notes)\r\n    await uploadItems(filesList, mindmaps)\r\n    await uploadItems(filesList, reminders)\r\n    await uploadItems(filesList, categories)\r\n    await uploadItems(filesList, tags)\r\n\r\n}\r\n\r\n//Upload Sync Helper Functions\r\nasync function uploadItems(filesList: Array<SyncFile>, items: Array<Note | MindMap | Reminder | Category | Tag>) { //todo save attachment uploaded\r\n    await items.forEach(item => {\r\n        if (item.cloudId === \"\" || item.cloudId == null) {\r\n            uploadJsonToCloud(convertItemToSyncFile(item), JSON.stringify(item)).then(itemId => {\r\n                console.log(\"I found\")\r\n                console.log(itemId)\r\n            })\r\n        } else {\r\n            let file = filesList.find(file => file.id === item.cloudId)\r\n            if (file != null) {\r\n                if (item.editedDate > file.editedDate) {\r\n                    uploadJsonToCloud(convertItemToSyncFile(item), JSON.stringify(item)).then(itemId => {\r\n                        console.log(\"YO\")\r\n                        console.log(itemId)\r\n                    })\r\n                }\r\n            } else {\r\n                console.warn(\"cloudId missing in cloud\")\r\n            }\r\n        }\r\n    })\r\n}\r\n","import {firebaseSignOut, signInWithToken} from \"./FirebaseHelper\";\r\n\r\n\r\nimport {startDownloadSync} from \"./SyncHelper\";\r\nimport {deleteAllDatabases} from \"../model/database/AppDatabase\";\r\n\r\nconst SCOPES = \"https://www.googleapis.com/auth/drive.appdata\";\r\nconst API_KEY = \"AIzaSyB_J9dH-BPa5zotdaBL9Ns7vGjF8oml_Fg\";\r\nconst CLIENT_ID = \"319843936727-uofur41kp6kbnv1btm2ifr7j1aalhak1.apps.googleusercontent.com\"; //todo client id contains localhost as allowed request origin\r\nconst DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\",];\r\n\r\n\r\n/**\r\n * Called on GAPI Signin State Change To Login Into Firebase & Initialize Sync\r\n * @param isSignedIn\r\n */\r\nfunction onSignInStateChange(isSignedIn: boolean) {\r\n    try {\r\n        // @ts-ignore\r\n        const auth2 = window.gapi.auth2.getAuthInstance()\r\n        if (isSignedIn) {\r\n            const currentUser = auth2.currentUser.get()\r\n            const authResponse = currentUser.getAuthResponse(true)\r\n            console.log(\"AuthHelper : Singing Into Firebase with AuthResponse\")\r\n            signInWithToken(authResponse.id_token, authResponse.access_token)\r\n            startDownloadSync()\r\n        } else {\r\n            console.log(\"AuthHelper:User Unsigned\")\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes the GAPI Client For SignIn & SignOut Functions\r\n */\r\nexport function initClient() {\r\n    try {\r\n        window.gapi.client.init({\r\n            apiKey: API_KEY,\r\n            clientId: CLIENT_ID,\r\n            discoveryDocs: DISCOVERY_DOCS,\r\n            scope: SCOPES\r\n        }).then(function () {\r\n            console.log(\"GAPI Client has been initialized\")\r\n            // @ts-ignore\r\n            window.gapi.auth2.getAuthInstance().isSignedIn.listen(onSignInStateChange)\r\n            // @ts-ignore\r\n            onSignInStateChange(window.gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        }, function (e) {\r\n            console.log(e)\r\n        });\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Starts SignIn Flow From GAPI\r\n */\r\nexport function signIn() {\r\n    try {\r\n        // @ts-ignore\r\n        window.gapi.auth2.getAuthInstance().signIn()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Signs Out User From GAPI & Firebase\r\n */\r\nexport function signOut() {\r\n    try {\r\n        // @ts-ignore\r\n        window.gapi.auth2.getAuthInstance().signOut()\r\n        firebaseSignOut()\r\n    } catch (e) {\r\n        firebaseSignOut()\r\n        console.log(e)\r\n    }\r\n    try {\r\n        deleteAllDatabases()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n","import MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport {signIn, signOut} from \"../../utils/AuthHelper\";\r\nimport React from \"react\";\r\nimport {createStyles, fade, makeStyles} from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {Avatar, Button, InputBase} from \"@material-ui/core\";\r\nimport useUser from \"../../store/UserProvider\";\r\nimport useAppState from \"../../store/AppStateProvider\";\r\nimport {Brightness4, Brightness7, Search} from \"@material-ui/icons\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport {ThemeType} from \"../Themes\";\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `100%`,\r\n        },\r\n        background: theme.palette.background.default,\r\n        boxShadow: \"0px 0px 0px 0px\",\r\n        borderBottom: \"1px solid \" + theme.palette.divider\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    //Search Styles\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: '20ch',\r\n        },\r\n    },\r\n    //Custom Styles\r\n    rightContainer: {\r\n        marginLeft: \"auto\",\r\n    },\r\n    loginButton: {\r\n        textTransform: \"none\",\r\n    },\r\n    profileImage: {\r\n        width: \"40px\",\r\n        height: \"40px\",\r\n        borderRadius: \"50%\",\r\n    },\r\n    appBarContainer: {\r\n        background: theme.palette.background.default,\r\n    }\r\n}));\r\n\r\nexport default function Header() {\r\n    const classes = useStyles();\r\n    const {user, setUser} = useUser();\r\n    const isSignedIn = user != null;\r\n    const handleSignIn = () => {\r\n        signIn();\r\n    };\r\n\r\n    // Profile Menu\r\n    const [anchorEl, setAnchorEl] = React.useState<any | null>(null);\r\n    const [anchorMainEl, setAnchorMainEl] = React.useState<any | null>(null);\r\n    const {setSettingsOpen, setAccountOpen} = useAppState()\r\n\r\n    const handleClick = (event: { currentTarget: any; }) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMainClick = (event: { currentTarget: any; }) => {\r\n        setAnchorMainEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleMainClose = () => {\r\n        setAnchorMainEl(null);\r\n    }\r\n\r\n    const {drawerOpen, setDrawerOpen} = useAppState()\r\n\r\n    //Handling Profile Menu Item Click\r\n    const handleAccount = () => {\r\n        //Todo goto account page or something\r\n    };\r\n    const handleLogout = () => {\r\n        signOut();\r\n        setUser(null);\r\n    };\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={`${classes.appBar}`}\r\n            color={\"transparent\"}\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    edge=\"start\"\r\n                    onClick={() => {\r\n                        setDrawerOpen(!drawerOpen)\r\n                    }}\r\n                    className={classes.menuButton}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Timeline\r\n                </Typography>\r\n                <div className={classes.search}>\r\n                    <div className={classes.searchIcon}>\r\n                        <Search/>\r\n                    </div>\r\n                    <InputBase\r\n                        placeholder=\"Search…\"\r\n                        classes={{\r\n                            root: classes.inputRoot,\r\n                            input: classes.inputInput,\r\n                        }}\r\n                        inputProps={{'aria-label': 'search'}}\r\n                    />\r\n                </div>\r\n                <div className={classes.rightContainer}>\r\n                    <ThemeToggle/>\r\n                    {!isSignedIn ? (\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.loginButton}\r\n                            onClick={handleSignIn}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    ) : (\r\n                        <IconButton\r\n                            aria-controls=\"simple-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <Avatar\r\n                                src={user?.photoURL}\r\n                                alt={user?.displayName}\r\n                            />\r\n                        </IconButton>\r\n                    )}\r\n                    <IconButton\r\n                        aria-controls=\"simple-menu\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleMainClick}\r\n                    >\r\n                        <MoreVertIcon/>\r\n                    </IconButton>\r\n                </div>\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                >\r\n                    <MenuItem onClick={handleClose}>My Account</MenuItem>\r\n                    <MenuItem\r\n                        onClick={(e) => {\r\n                            handleClose();\r\n                            handleLogout();\r\n                        }}\r\n                    >\r\n                        Logout\r\n                    </MenuItem>\r\n                </Menu>\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorMainEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorMainEl)}\r\n                    onClose={handleMainClose}\r\n                >\r\n                    <MenuItem onClick={() => {\r\n                        setAccountOpen(true)\r\n                    }}>Account</MenuItem>\r\n                    <MenuItem onClick={() => {\r\n                        setSettingsOpen(true)\r\n                    }}>Settings</MenuItem>\r\n                </Menu>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport function ThemeToggle() {\r\n\r\n    const {themeType, setThemeType} = useAppState()\r\n\r\n    return (\r\n        <IconButton\r\n            onClick={() => {\r\n                if (themeType === ThemeType.Light) {\r\n                    setThemeType(ThemeType.Dark)\r\n                } else {\r\n                    setThemeType(ThemeType.Light)\r\n                }\r\n            }}>\r\n            {themeType === ThemeType.Dark ? (\r\n                <Brightness7/>\r\n            ) : (\r\n                <Brightness4/>\r\n            )}\r\n        </IconButton>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport useAppState from \"../../store/AppStateProvider\";\r\nimport {Archive, Category, Dashboard, Delete, Label, Notifications} from \"@material-ui/icons\";\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {Hidden} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport const drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        drawer: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: drawerWidth,\r\n                flexShrink: 0,\r\n                zIndex: 99\r\n            },\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        toolbar: {\r\n            ...theme.mixins.toolbar,\r\n            marginTop: \"1em\",\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        sectionTitle: {\r\n            marginLeft: \"1.4em\",\r\n            color: theme.palette.text.secondary\r\n        },\r\n        navLink: {\r\n            textDecoration: \"none\",\r\n            color: theme.palette.text.primary\r\n        },\r\n        activeNavLink: {\r\n            color: theme.palette.getContrastText(theme.palette.primary.light),\r\n            backgroundColor: theme.palette.primary.light,\r\n            display: \"block\"\r\n        }\r\n    }),\r\n);\r\n\r\nexport default function SideDrawer(props: any) {\r\n\r\n    const {drawerOpen, setDrawerOpen} = useAppState()\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const handleDrawerToggle = () => {\r\n        setDrawerOpen(!drawerOpen);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}/>\r\n            <Typography variant={\"caption\"} className={classes.sectionTitle}>\r\n                Dashboard\r\n            </Typography>\r\n            <List>\r\n                <NavLink to={\"/\"} className={classes.navLink} exact activeClassName={classes.activeNavLink}>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <Dashboard/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Personal\"}/>\r\n                    </ListItem>\r\n                </NavLink>\r\n            </List>\r\n            <Typography variant={\"caption\"} className={classes.sectionTitle}>\r\n                Produce\r\n            </Typography>\r\n            <List>\r\n                <NavLink to={\"/reminders\"} className={classes.navLink} exact activeClassName={classes.activeNavLink}>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <Notifications/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Reminders\"}/>\r\n                    </ListItem>\r\n                </NavLink>\r\n                <NavLink to={\"/archive\"} className={classes.navLink} exact activeClassName={classes.activeNavLink}>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <Archive/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Archive\"}/>\r\n                    </ListItem>\r\n                </NavLink>\r\n                <NavLink to={\"/trash\"} className={classes.navLink} exact activeClassName={classes.activeNavLink}>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <Delete/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Trash\"}/>\r\n                    </ListItem>\r\n                </NavLink>\r\n            </List>\r\n            <Typography variant={\"caption\"} className={classes.sectionTitle}>\r\n                Organize\r\n            </Typography>\r\n            <List>\r\n                <NavLink to={\"/tags\"} className={classes.navLink} exact activeClassName={classes.activeNavLink}>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <Label/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Tags\"}/>\r\n                    </ListItem>\r\n                </NavLink>\r\n                <NavLink to={\"/categories\"} className={classes.navLink} exact activeClassName={classes.activeNavLink}>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <Category/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Categories\"}/>\r\n                    </ListItem>\r\n                </NavLink>\r\n            </List>\r\n            {/*    todo display user categories    */}\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n            <Hidden smUp implementation=\"css\">\r\n                <Drawer\r\n                    variant=\"temporary\"\r\n                    anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                    open={drawerOpen}\r\n                    onClose={handleDrawerToggle}\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                    ModalProps={{\r\n                        keepMounted: true, // Better open performance on mobile.\r\n                    }}\r\n                >\r\n                    {drawer}\r\n                </Drawer>\r\n            </Hidden>\r\n            <Hidden xsDown implementation=\"css\">\r\n                <Drawer\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                    variant=\"permanent\"\r\n                    open\r\n                >\r\n                    {drawer}\r\n                </Drawer>\r\n            </Hidden>\r\n        </nav>\r\n    );\r\n}\r\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n    },\r\n}));\r\n\r\nexport default function Container(props: { className: string | null, children: any }) {\r\n    const classes = useStyles();\r\n    let classProp = props.className == null ? \"\" : props.className\r\n    return (\r\n        <div className={`${classes.root} ${classProp}`}>\r\n            <CssBaseline/>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Link, useParams} from \"react-router-dom\"\r\nimport {getNoteById, UpdateNoteIntoDb} from \"../../../model/database/NoteDao\";\r\nimport {Note} from \"../../../model/Note\";\r\nimport RichMarkdownEditor from \"rich-markdown-editor\";\r\nimport Content from \"../../components/Content\";\r\nimport {createStyles, IconButton, InputBase} from \"@material-ui/core\";\r\nimport {ArrowBack} from \"@material-ui/icons\";\r\nimport \"./NoteEditor.scss\"\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport {getNextId} from \"../../../utils/Helpers\";\r\nimport useAppState from \"../../../store/AppStateProvider\";\r\nimport {ThemeType} from \"../../Themes\";\r\nimport {editorDark, editorLight} from \"./EditorTheme\";\r\nimport {startUploadSync} from \"../../../utils/SyncHelper\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Theme} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    editorContainer: {},\r\n    noteEditor: {\r\n        width: \"100%\",\r\n        padding: \"1rem 1rem 1rem 2rem\",\r\n    },\r\n    noteTitle: {\r\n        width: \"100%\",\r\n        border: 0,\r\n        outline: 0,\r\n        padding: \"1rem 1rem 1rem 2rem\",\r\n        fontSize: theme.typography.h3.fontSize,\r\n        fontFamily: theme.typography.h4.fontFamily\r\n    }\r\n}))\r\n\r\nexport default function NoteEditor() {\r\n\r\n    // @ts-ignore\r\n    const {id} = useParams()\r\n    const classes = useStyles()\r\n\r\n    let [note, setNote] = useState<Note>(new Note())\r\n    let [noteTitle, setNoteTitle] = useState(note.title)\r\n\r\n    let {notes} = useStorage()\r\n\r\n    useEffect(() => {\r\n        if (id != null) {\r\n            try {\r\n                getNoteById(parseInt(id)).then(n => {\r\n                    if (n != null) {\r\n                        setNote(n)\r\n                        setNoteTitle(n.title)\r\n                    }\r\n                })\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        } else {\r\n            note.id = getNextId(notes)\r\n        }\r\n    }, [id, notes]) //do not add note as a dependency\r\n\r\n    const {themeType} = useAppState()\r\n\r\n    return (\r\n        <Content>\r\n            <div className={`${classes.editorContainer}`}>\r\n                <Link to=\"/\" onClick={() => {\r\n                    note.title = noteTitle\r\n                    note.editedDate = Date.now() //todo check if note is modified\r\n                    UpdateNoteIntoDb(note).then(() => {\r\n                        startUploadSync().then(r => console.log(r))\r\n                    })\r\n                }}>\r\n                    <IconButton>\r\n                        <ArrowBack/>\r\n                    </IconButton>\r\n                </Link>\r\n                <InputBase\r\n                    type={\"text\"}\r\n                    value={noteTitle}\r\n                    className={classes.noteTitle}\r\n                    onChange={(e) => {\r\n                        console.log(e.target.value)\r\n                        setNoteTitle(e.target.value)\r\n                    }}\r\n                    placeholder={\"Title\"}\r\n                />\r\n                <RichMarkdownEditor\r\n                    className={`${classes.noteEditor}`}\r\n                    onChange={(getValue) => {\r\n                        note.text = getValue()\r\n                    }}\r\n                    value={note.text}\r\n                    placeholder={\"Note\"}\r\n                    theme={themeType === ThemeType.Dark ? editorDark : editorLight}\r\n                />\r\n            </div>\r\n        </Content>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    FormControl,\r\n    IconButton,\r\n    MenuItem,\r\n    Radio,\r\n    Select,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Reminder, RepeatInterval} from \"../../../model/Reminder\";\r\nimport {getWeekdays} from \"../../../utils/ReminderHelper\";\r\nimport {DateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {format} from \"date-fns\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n        },\r\n        formControl: {},\r\n        formRow: {\r\n            width: \"100%\",\r\n        },\r\n        formRowMargin: {\r\n            width: \"100%\",\r\n            marginTop: \"1em\"\r\n        },\r\n        marginContainer: {\r\n            margin: \"1em\"\r\n        },\r\n        centerText: {\r\n            textAlign: \"center\"\r\n        },\r\n        buttonsContainer: {\r\n            display: \"flex\",\r\n            flexFlow: \"row no-wrap\",\r\n            justifyContent: \"flex-end\",\r\n        },\r\n        daysContainer: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n            marginTop: \"1em\"\r\n        },\r\n        dayBtn: {\r\n            width: \"3em\",\r\n            height: \"3em\",\r\n            borderRadius: \"50%\",\r\n            padding: '0.4em'\r\n        },\r\n        dayItem: {\r\n            width: \"2em\",\r\n            height: \"2em\",\r\n            lineHeight: '1.75em',\r\n            textAlign: \"center\",\r\n            background: \"rgba(0,0,0,.15)\",\r\n            borderRadius: \"50%\",\r\n            cursor: \"pointer\",\r\n        },\r\n        dayItemText: {\r\n            fontSize: \"16px\",\r\n        },\r\n        selectedDayItem: {\r\n            border: \"1px solid \" + theme.palette.text.secondary,\r\n            background: theme.palette.primary.main,\r\n        },\r\n        monthContainer: {\r\n            marginTop: \"1em\"\r\n        },\r\n        monthRow: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\"\r\n        },\r\n        untilEvents: {\r\n            margin: \"1em\"\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ReminderIntervalDialogProps {\r\n    isOpen: boolean,\r\n    onClose: () => void,\r\n    reminder: Reminder,\r\n}\r\n\r\nexport const ReminderIntervalDialog = (props: ReminderIntervalDialogProps) => {\r\n\r\n    const classes = useStyles();\r\n    let reminder = props.reminder\r\n    const [intervalType, setIntervalType] = React.useState(reminder.intervalType);\r\n    const [intervalNumber, setIntervalNumber] = useState(reminder.intervalNumber)\r\n    const [until, setUntil] = useState(\"forever\")\r\n    const [reminderDays, setReminderDays] = useState(reminder.weekDays)\r\n    const [sameDay, setSameDay] = useState(reminder.sameMonthDay)\r\n    const [untilDateDialog, setUntilDateDialog] = useState(false)\r\n    const [untilDate, setUntilDate] = useState(reminder.untilDate == null ? null : new Date(reminder.untilDate))\r\n    const [untilEvents, setUntilEvents] = useState(reminder.untilEvents || 1)\r\n\r\n    const initFromReminder = (reminder: Reminder) => {\r\n        setIntervalType(reminder.intervalType)\r\n        setIntervalNumber(reminder.intervalNumber)\r\n        if (reminder.forever) {\r\n            setUntil(\"forever\")\r\n        } else if (reminder.untilDate != null) {\r\n            setUntil(\"date\")\r\n        } else if (reminder.untilEvents != null) {\r\n            setUntil(\"events\")\r\n        }\r\n        setReminderDays(reminder.weekDays)\r\n        setSameDay(reminder.sameMonthDay)\r\n        setUntilDate(reminder.untilDate == null ? null : new Date(reminder.untilDate))\r\n    }\r\n\r\n    useEffect(() => {\r\n        initFromReminder(props.reminder)\r\n    }, [props.reminder])\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.isOpen}\r\n            onClose={props.onClose}\r\n            maxWidth={\"xs\"}\r\n            fullWidth={true}\r\n        >\r\n            <div className={classes.root}>\r\n                <FormControl variant=\"filled\" className={`${classes.formControl} ${classes.formRow}`}>\r\n                    <Select\r\n                        value={intervalType}\r\n                        onChange={(e) => {\r\n                            setIntervalType(e.target.value as RepeatInterval)\r\n                        }}\r\n                        renderValue={(value) => {\r\n                            if (value === RepeatInterval.Day) {\r\n                                return \"Repeats daily\"\r\n                            } else if (value === RepeatInterval.Week) {\r\n                                return \"Repeats weekly\"\r\n                            } else if (value === RepeatInterval.Month) {\r\n                                return \"Repeats monthly\"\r\n                            } else if (value === RepeatInterval.Year) {\r\n                                return \"Repeats yearly\"\r\n                            }\r\n                            return value as string\r\n                        }}\r\n                    >\r\n                        <MenuItem value={RepeatInterval.Day}>Daily</MenuItem>\r\n                        <MenuItem value={RepeatInterval.Week}>Weekly</MenuItem>\r\n                        <MenuItem value={RepeatInterval.Month}>Monthly</MenuItem>\r\n                        <MenuItem value={RepeatInterval.Year}>Yearly</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <div className={classes.marginContainer}>\r\n                    <Typography>\r\n                        Repeats every <TextField\r\n                        inputProps={{className: classes.centerText}}\r\n                        type={\"number\"}\r\n                        value={intervalNumber}\r\n                        onChange={(e) => {\r\n                            setIntervalNumber(parseInt(e.target.value))\r\n                            reminder.intervalNumber = parseInt(e.target.value)\r\n                        }}\r\n                    /> {intervalType}{intervalNumber > 1 ? \"s\" : null}\r\n                    </Typography>\r\n                    {\r\n                        intervalType === RepeatInterval.Week ? (\r\n                            <div className={classes.daysContainer}>\r\n                                {getWeekdays().map(day =>\r\n                                    (\r\n                                        <IconButton\r\n                                            className={classes.dayBtn}\r\n                                            onClick={() => {\r\n                                                let index = reminderDays.indexOf(day)\r\n                                                if (index > -1) {\r\n                                                    let newDays = [...reminderDays]\r\n                                                    newDays.splice(index, 1)\r\n                                                    setReminderDays(newDays)\r\n                                                } else {\r\n                                                    setReminderDays([...reminderDays, day])\r\n                                                }\r\n                                            }}>\r\n                                            <div\r\n                                                key={day}\r\n                                                className={`${classes.dayItem} ${reminderDays.indexOf(day) > -1 ? classes.selectedDayItem : \"\"}`}>\r\n                                                <span\r\n                                                    className={classes.dayItemText}>{day[0].toUpperCase() + day.substring(1, 3)}</span>\r\n                                            </div>\r\n                                        </IconButton>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        ) : intervalType === RepeatInterval.Month ? (\r\n                            <div className={classes.monthContainer}>\r\n                                <div className={classes.monthRow}>\r\n                                    <Radio\r\n                                        checked={sameDay}\r\n                                        onClick={() => setSameDay(true)}\r\n                                    />\r\n                                    <Typography>\r\n                                        Same day of the next month\r\n                                    </Typography>\r\n                                </div>\r\n                                <div className={classes.monthRow}>\r\n                                    <Radio\r\n                                        checked={!sameDay}\r\n                                        onClick={() => setSameDay(false)}\r\n                                    />\r\n                                    <Typography>\r\n                                        Same date of the next month\r\n                                    </Typography>\r\n                                </div>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                    <FormControl variant=\"outlined\" className={`${classes.formControl} ${classes.formRowMargin}`}>\r\n                        <Select\r\n                            value={until}\r\n                            onChange={(e) => {\r\n                                let value = e.target.value as string\r\n                                if (value === \"date\") {\r\n                                    setUntilDateDialog(true)\r\n                                } else if (value === \"events\") {\r\n                                    //todo show events number\r\n                                }\r\n                                setUntil(value)\r\n                            }}\r\n                            renderValue={(value) => {\r\n                                if (value === \"forever\") {\r\n                                    return \"Repeats forever\"\r\n                                } else if (value === \"date\" && untilDate != null) {\r\n                                    return \"Until \" + format(untilDate, \"p PPPP\")\r\n                                } else if (value === \"events\") {\r\n                                    //todo return events value\r\n                                    return \"For \" + untilEvents + \" events\"\r\n                                }\r\n                                return value as string\r\n                            }}\r\n                        >\r\n                            <MenuItem value={\"forever\"}>Forever</MenuItem>\r\n                            <MenuItem value={\"date\"}>Until Specified Date</MenuItem>\r\n                            <MenuItem value={\"events\"}>For number of events</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    {\r\n                        until === \"events\" ? (\r\n                            <TextField\r\n                                type={\"number\"}\r\n                                value={untilEvents}\r\n                                className={classes.untilEvents}\r\n                                onChange={(e) => setUntilEvents(parseInt(e.target.value))}\r\n                            />\r\n                        ) : null\r\n                    }\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <DateTimePicker\r\n                            value={untilDate}\r\n                            open={untilDateDialog}\r\n                            onClose={() => setUntilDateDialog(false)}\r\n                            disablePast={true}\r\n                            onChange={(date) => {\r\n                                if (date != null) {\r\n                                    setUntilDate(date)\r\n                                    reminder.time = date.getTime()\r\n                                }\r\n                            }}\r\n                            TextFieldComponent={\r\n                                () => null\r\n                            }\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <div className={`${classes.buttonsContainer} ${classes.formRowMargin}`}>\r\n                        <Button variant={\"outlined\"} onClick={() => props.onClose()}>Cancel</Button>&nbsp;\r\n                        <Button variant={\"outlined\"} onClick={() => {\r\n                            reminder.repeat = true\r\n                            reminder.intervalType = intervalType\r\n                            reminder.intervalNumber = intervalNumber\r\n                            reminder.weekDays = reminderDays\r\n                            reminder.sameMonthDay = sameDay\r\n                            if (until === \"forever\") {\r\n                                reminder.forever = true\r\n                            } else if (until === \"date\" && untilDate != null) {\r\n                                reminder.untilDate = untilDate.getTime()\r\n                            } else if (until === \"events\") {\r\n                                reminder.untilEvents = untilEvents\r\n                            }\r\n                            props.onClose()\r\n                        }}>Set</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Button, Dialog, FormControl, MenuItem, Select, TextField, Typography} from \"@material-ui/core\";\r\nimport {Reminder, RepeatInterval} from \"../../../model/Reminder\";\r\nimport {AddReminderIntoDb, UpdateReminderIntoDb} from \"../../../model/database/ReminderDao\";\r\nimport {getNextId} from \"../../../utils/Helpers\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport {DateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {format} from \"date-fns\";\r\nimport {ReminderIntervalDialog} from \"./ReminderIntervalDialog\";\r\n\r\ninterface ReminderDialogProps {\r\n    isOpen: boolean,\r\n    onClose: () => void,\r\n    reminder?: Reminder,\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {},\r\n        root: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            margin: \"1em\",\r\n        },\r\n        formRow: {\r\n            width: \"100%\",\r\n            marginTop: \"1em\",\r\n        },\r\n        buttonsContainer: {\r\n            display: \"flex\",\r\n            flexFlow: \"row no-wrap\",\r\n            justifyContent: \"flex-end\",\r\n        }\r\n    }),\r\n);\r\n\r\nexport const ReminderDialog = (props: ReminderDialogProps) => {\r\n\r\n    //Setting Up Reminders\r\n    const {reminders, initReminders} = useStorage()\r\n    let reminder = props.reminder || new Reminder()\r\n\r\n    //States\r\n    const classes = useStyles();\r\n    const [reminderName, setReminderName] = useState(reminder.name);\r\n    const [reminderDesc, setReminderDesc] = useState(reminder.description);\r\n    const [ringsDate, setRingsDate] = useState(new Date(reminder.time));\r\n    const [reminderRings, setReminderRings] = useState(\"hour\")\r\n    const [reminderRepeats, setReminderRepeats] = useState(\"none\")\r\n\r\n    //Dialog States\r\n    const [ringsDateDialog, setRingsDateDialog] = useState(false)\r\n    const [intervalDialog, setIntervalDialog] = useState(false)\r\n\r\n    const initRepeatFromReminder = (reminder: Reminder) => {\r\n        if (!reminder.repeat) {\r\n            setReminderRepeats(\"none\")\r\n        } else {\r\n            if (reminder.intervalType === RepeatInterval.Hour) {\r\n                setReminderRepeats(\"hourly\")\r\n            } else if (reminder.intervalType === RepeatInterval.Day) {\r\n                setReminderRepeats(\"daily\")\r\n            } else if (reminder.intervalType === RepeatInterval.Week) {\r\n                setReminderRepeats(\"weekly\")\r\n            } else if (reminder.intervalType === RepeatInterval.Month) {\r\n                setReminderRepeats(\"monthly\")\r\n            } else if (reminder.intervalType === RepeatInterval.Year) {\r\n                setReminderRepeats(\"yearly\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const initFromReminder = (reminder: Reminder) => {\r\n        setReminderName(reminder.name)\r\n        setReminderDesc(reminder.description)\r\n        //todo setReminderRings calculate from date , tomorrow , tomorrow morning\r\n        initRepeatFromReminder(reminder)\r\n        setRingsDate(new Date(reminder.time))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.reminder != null) {\r\n            initFromReminder(props.reminder!)\r\n        }\r\n    }, [props.reminder])\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.isOpen}\r\n            onClose={props.onClose}\r\n            maxWidth={\"xs\"}\r\n            fullWidth={true}\r\n        >\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <Typography variant={\"h6\"}>\r\n                    Create Reminder\r\n                </Typography>\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Name\"\r\n                    variant=\"outlined\"\r\n                    className={classes.formRow}\r\n                    value={reminderName}\r\n                    onChange={(e) => {\r\n                        setReminderName(e.target.value)\r\n                        reminder.name = e.target.value\r\n                    }}\r\n                />\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Description\"\r\n                    variant=\"outlined\"\r\n                    className={classes.formRow}\r\n                    value={reminderDesc}\r\n                    onChange={(e) => {\r\n                        setReminderDesc(e.target.value)\r\n                        reminder.description = e.target.value\r\n                    }}\r\n                />\r\n\r\n                <FormControl variant=\"outlined\" className={`${classes.formControl} ${classes.formRow}`}>\r\n                    <Select\r\n                        value={reminderRings}\r\n                        onChange={(e) => {\r\n                            let val = e.target.value as string\r\n\r\n                            if (val === \"hour\") {\r\n                                //todo set reminder time to hour later\r\n                            } else if (val === \"tomorrow\") {\r\n                                //todo set reminder time to tomorrow\r\n                            } else if (val === \"t-morning\") {\r\n                                //todo set reminder time to tomorrow's morning\r\n                            } else {\r\n                                setRingsDateDialog(true)\r\n                            }\r\n\r\n                            setReminderRings(val)\r\n                        }}\r\n                        renderValue={(value) => {\r\n                            if (value === \"hour\") {\r\n                                return \"Rings after an hour\"\r\n                            } else if (value === \"tomorrow\") {\r\n                                return \"Rings tomorrow\"\r\n                            } else if (value === \"t-morning\") {\r\n                                return \"Rings tomorrow morning\"\r\n                            } else {\r\n                                return format(ringsDate, \"p PPPP\")\r\n                            }\r\n                        }}\r\n                    >\r\n                        <MenuItem value={\"hour\"}>After an hour</MenuItem>\r\n                        <MenuItem value={\"tomorrow\"}>Tomorrow</MenuItem>\r\n                        <MenuItem value={\"t-morning\"}>Tomorrow Morning</MenuItem>\r\n                        <MenuItem value={\"CustomDate\"}>Pick Date & Time</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <DateTimePicker\r\n                        value={ringsDate}\r\n                        open={ringsDateDialog}\r\n                        onClose={() => setRingsDateDialog(false)}\r\n                        disablePast={true}\r\n                        onChange={(date) => {\r\n                            if (date != null) {\r\n                                setRingsDate(date)\r\n                            }\r\n                        }}\r\n                        TextFieldComponent={\r\n                            () => null\r\n                        }\r\n                    />\r\n                </MuiPickersUtilsProvider>\r\n                <FormControl variant=\"outlined\" className={`${classes.formControl} ${classes.formRow}`}>\r\n                    <Select\r\n                        value={reminderRepeats}\r\n                        onChange={(e) => {\r\n                            let value = e.target.value as string\r\n                            if (value === \"custom\") {\r\n                                setIntervalDialog(true)\r\n                            }\r\n                            setReminderRepeats(value)\r\n                        }}\r\n                        renderValue={(value) => {\r\n                            if (value === \"none\") {\r\n                                return \"Does not repeat\"\r\n                            } else if (value === \"daily\") {\r\n                                return \"Repeats daily\"\r\n                            } else if (value === \"weekly\") {\r\n                                return \"Repeats weekly\"\r\n                            } else if (value === \"monthly\") {\r\n                                return \"Repeats monthly\"\r\n                            } else if (value === \"yearly\") {\r\n                                return \"Repeats yearly\"\r\n                            } else {\r\n                                //todo return repeat string\r\n                            }\r\n                        }}\r\n                    >\r\n                        <MenuItem value={\"none\"}>None</MenuItem>\r\n                        <MenuItem value={\"daily\"}>Daily</MenuItem>\r\n                        <MenuItem value={\"weekly\"}>Weekly</MenuItem>\r\n                        <MenuItem value={\"monthly\"}>Monthly</MenuItem>\r\n                        <MenuItem value={\"yearly\"}>Yearly</MenuItem>\r\n                        <MenuItem value={\"custom\"}>Custom</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <div className={`${classes.buttonsContainer} ${classes.formRow}`}>\r\n                    <Button variant={\"outlined\"} onClick={() => props.onClose()}>Cancel</Button>&nbsp;\r\n                    <Button variant={\"outlined\"} onClick={() => {\r\n                        reminder.name = reminderName\r\n                        reminder.description = reminderDesc\r\n                        reminder.time = ringsDate.getTime()\r\n                        if (reminderRepeats === \"none\") {\r\n                            reminder.repeat = false\r\n                        } else if (reminderRepeats === \"daily\") {\r\n                            reminder.repeat = true\r\n                            reminder.intervalType = RepeatInterval.Day\r\n                        } else if (reminderRepeats === \"weekly\") {\r\n                            reminder.repeat = true\r\n                            reminder.intervalType = RepeatInterval.Week\r\n                        } else if (reminderRepeats === \"monthly\") {\r\n                            reminder.repeat = true\r\n                            reminder.intervalType = RepeatInterval.Month\r\n                        } else if (reminderRepeats === \"yearly\") {\r\n                            reminder.repeat = true\r\n                            reminder.intervalType = RepeatInterval.Year\r\n                        }\r\n                        //reminder id\r\n                        if (reminder.id == null) {\r\n                            reminder.id = getNextId(reminders)\r\n                            AddReminderIntoDb(reminder)\r\n                        } else {\r\n                            UpdateReminderIntoDb(reminder)\r\n                        }\r\n                        props.onClose()\r\n                        initReminders()\r\n                    }}>Set</Button>\r\n                </div>\r\n            </form>\r\n            <ReminderIntervalDialog\r\n                isOpen={intervalDialog}\r\n                onClose={() => {\r\n                    setIntervalDialog(false)\r\n                    initRepeatFromReminder(reminder)\r\n                }}\r\n                reminder={reminder}\r\n            />\r\n        </Dialog>\r\n    );\r\n}\r\n","import {Reminder} from \"../../../model/Reminder\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {NotificationsOutlined} from \"@material-ui/icons\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport React from \"react\";\r\nimport {getReminderDateTimeString, getReminderRepeatString} from \"../../../utils/ReminderHelper\";\r\nimport {createStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\ninterface RemindersListItemProps {\r\n    reminder: Reminder,\r\n    isSelectionMode: boolean,\r\n    isSelected: boolean,\r\n    onShowMenu: (anchor: any) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    reminderText: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    }\r\n}))\r\n\r\nexport default function RemindersListItem(props: RemindersListItemProps) {\r\n\r\n    const classes = useStyles()\r\n    let reminder = props.reminder\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {props.isSelectionMode ? (\r\n                <ListItemIcon>\r\n                    <Checkbox\r\n                        edge=\"start\"\r\n                        checked={props.isSelected}\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                    />\r\n                </ListItemIcon>\r\n            ) : (\r\n                <ListItemIcon>\r\n                    <NotificationsOutlined/>\r\n                </ListItemIcon>\r\n            )}\r\n            <div className={classes.reminderText}>\r\n                <ListItemText\r\n                    primary={reminder.name}\r\n                    secondary={reminder.description}\r\n                />\r\n                <ListItemText\r\n                    primary={getReminderDateTimeString(reminder)}\r\n                    secondary={getReminderRepeatString(reminder)}\r\n                />\r\n            </div>\r\n            <ListItemSecondaryAction style={{marginRight: \"1em\"}}>\r\n                <IconButton edge=\"end\" aria-label=\"menu\" onClick={(e) => {\r\n                    props.onShowMenu(e.currentTarget)\r\n                }}>\r\n                    <MoreVertIcon/>\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import {BaseSelectionBar} from \"../commons/BaseSelectionBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\nimport {FunctionComponent} from \"react\";\r\nimport {Reminder} from \"../../../model/Reminder\";\r\n\r\ninterface Props {\r\n    checked: Array<Reminder>,\r\n    setChecked: (checked: Array<Reminder>) => void,\r\n    onDelete: () => void,\r\n}\r\n\r\nexport const ReminderSelectionBar: FunctionComponent<Props> = (props) => {\r\n\r\n    return (\r\n        <BaseSelectionBar\r\n            title={props.checked.length.toString()}\r\n            isVisible={props.checked.length > 0}\r\n            onClose={() => props.setChecked([])}\r\n        >\r\n            <IconButton onClick={props.onDelete}>\r\n                <DeleteOutline/>\r\n            </IconButton>\r\n        </BaseSelectionBar>\r\n    )\r\n}\r\n\r\nReminderSelectionBar.defaultProps = {}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport {Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {Reminder} from \"../../../model/Reminder\";\r\nimport {removeReminder} from \"./RemindersList\";\r\n\r\ninterface ReminderItemMenuProps {\r\n    onShowReminderDialog: () => void,\r\n    onItemSelect: () => void,\r\n    reminder: Reminder,\r\n    anchorEl: any,\r\n    onMenuClose: () => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        menuItem: {},\r\n    }),\r\n)\r\n\r\nexport default function ReminderItemMenu(props: ReminderItemMenuProps) {\r\n\r\n    const classes = useStyles()\r\n\r\n    const {initReminders} = useStorage()\r\n\r\n    return (\r\n        <Menu\r\n            open={Boolean(props.anchorEl)}\r\n            onClose={props.onMenuClose}\r\n            anchorEl={props.anchorEl}\r\n        >\r\n            <MenuItem onClick={() => {\r\n                props.onItemSelect()\r\n                props.onMenuClose()\r\n            }}>\r\n                <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                    Select\r\n                </Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={() => {\r\n                props.onShowReminderDialog()\r\n                props.onMenuClose()\r\n            }}>\r\n                <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                    Edit\r\n                </Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={() => {\r\n                removeReminder(props.reminder).then(() => {\r\n                    initReminders()\r\n                })\r\n                props.onMenuClose()\r\n            }}>\r\n                <Typography variant={\"inherit\"} className={classes.menuItem}>\r\n                    Delete\r\n                </Typography>\r\n            </MenuItem>\r\n        </Menu>\r\n    )\r\n}\r\n","import List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport useStorage from \"../../../store/StorageProvider\";\r\nimport useLongPress from \"../../../utils/useLongPress\";\r\nimport RemindersListItem from \"./RemindersListItem\";\r\nimport {Reminder} from \"../../../model/Reminder\";\r\nimport {ReminderSelectionBar} from \"./ReminderSelectionBar\";\r\nimport {UpdateReminderIntoDb} from \"../../../model/database/ReminderDao\";\r\nimport ReminderItemMenu from \"./ReminderItemMenu\";\r\nimport {ReminderDialog} from \"../dialogs/ReminderDialog\";\r\n\r\ninterface RemindersListProps {\r\n    EmptyListComponent: React.ReactNode\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        remindersList: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nexport default function RemindersList(props: RemindersListProps) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [checked, setChecked] = React.useState([] as Array<Reminder>);\r\n\r\n    const {reminders, initReminders} = useStorage()\r\n\r\n    useEffect(() => {\r\n        initReminders()\r\n    }, [initReminders])\r\n\r\n    const toggleCheckItem = (id: number) => {\r\n        let idIndex = checked.findIndex(rem => rem.id === id)\r\n        let newChecked = [...checked]\r\n\r\n        if (idIndex < 0) {\r\n            let reminder = reminders.find(rem => rem.id === id)\r\n            if (reminder != null) {\r\n                newChecked.push(reminder)\r\n            }\r\n        } else {\r\n            newChecked.splice(idIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked)\r\n    }\r\n\r\n    let longPressEvent = useLongPress({\r\n        onLongPress: (e) => {\r\n            // @ts-ignore\r\n            let id = parseInt(e.currentTarget.getAttribute(\"reminderid\").trim())\r\n            if (id != null) {\r\n                toggleCheckItem(id)\r\n            }\r\n        },\r\n        onClick: (e) => {\r\n            if (checked.length > 0) {\r\n                // @ts-ignore\r\n                let id = parseInt(e.currentTarget.getAttribute(\"reminderid\").trim())\r\n                if (id != null) {\r\n                    toggleCheckItem(id)\r\n                }\r\n            } else {\r\n                //todo opened reminder\r\n            }\r\n        }\r\n    }, {delay: 600})\r\n\r\n    const [reminderDialogOpen, setReminderDialogOpen] = useState(false)\r\n    const [currentReminder, setCurrentReminder] = useState(new Reminder())\r\n    const [reminderMenuAnchor, setReminderMenuAnchor] = useState<any | null>()\r\n\r\n    const {EmptyListComponent} = props\r\n\r\n    return (\r\n        reminders.length > 0 ? (\r\n            <List className={classes.remindersList}>\r\n                {reminders.map((reminder) => {\r\n                    return (// @ts-ignore\r\n                        <ListItem key={reminder.id} reminderid={reminder.id} dense button {...longPressEvent}>\r\n                            <RemindersListItem\r\n                                isSelectionMode={checked.length > 0}\r\n                                isSelected={checked.indexOf(reminder) > -1}\r\n                                reminder={reminder}\r\n                                onShowMenu={(anchor) => {\r\n                                    setCurrentReminder(reminder)\r\n                                    setReminderMenuAnchor(anchor)\r\n                                }}\r\n                            />\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n                <ReminderItemMenu\r\n                    onMenuClose={() => setReminderMenuAnchor(null)}\r\n                    anchorEl={reminderMenuAnchor}\r\n                    reminder={currentReminder}\r\n                    onShowReminderDialog={() => setReminderDialogOpen(true)}\r\n                    onItemSelect={() => {\r\n                        if (currentReminder.id != null) {\r\n                            toggleCheckItem(currentReminder.id)\r\n                        }\r\n                    }}\r\n                />\r\n                <ReminderDialog\r\n                    reminder={currentReminder}\r\n                    isOpen={reminderDialogOpen}\r\n                    onClose={() => setReminderDialogOpen(false)}\r\n                />\r\n                <ReminderSelectionBar\r\n                    checked={checked}\r\n                    setChecked={setChecked}\r\n                    onDelete={() => {\r\n                        checked.forEach(reminder => {\r\n                            if (reminder != null) {\r\n                                removeReminder(reminder).then(() => initReminders())\r\n                            }\r\n                        })\r\n                        setChecked([])\r\n                    }}\r\n                />\r\n            </List>\r\n        ) : (\r\n            <React.Fragment>\r\n                {EmptyListComponent}\r\n            </React.Fragment>\r\n        )\r\n    )\r\n}\r\n\r\nexport async function removeReminder(reminder: Reminder) {\r\n    reminder.deleted = true\r\n    return await UpdateReminderIntoDb(reminder)\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport Content from \"../components/Content\";\r\nimport {createStyles, Fab} from \"@material-ui/core\";\r\nimport {Notifications} from \"@material-ui/icons\";\r\nimport {ReminderDialog} from \"../components/dialogs/ReminderDialog\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Theme} from \"@material-ui/core/styles\";\r\nimport RemindersList from \"../components/reminders/RemindersList\";\r\nimport EmptyList from \"../components/EmptyList\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    reminderFab: {\r\n        position: \"fixed\",\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(4),\r\n        background: theme.palette.primary.main\r\n    }\r\n}))\r\n\r\nexport default function Reminders() {\r\n\r\n    const classes = useStyles()\r\n    const [reminderDialog, setReminderDialog] = useState(false)\r\n\r\n    return (\r\n        <Content>\r\n            <RemindersList\r\n                EmptyListComponent={\r\n                    <EmptyList/>\r\n                }\r\n            />\r\n            <ReminderDialog isOpen={reminderDialog} onClose={() => setReminderDialog(false)}/>\r\n            <Fab\r\n                onClick={() => {\r\n                    setReminderDialog(true)\r\n                }}\r\n                className={classes.reminderFab}\r\n            >\r\n                <Notifications/>\r\n            </Fab>\r\n        </Content>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nimport Content from \"../components/Content\";\r\nimport {MainList, updateItem} from \"../components/MainItem/MainList\";\r\nimport EmptyList from \"../components/EmptyList\";\r\n\r\nexport default function Trash() {\r\n    return (\r\n        <Content>\r\n            <MainList\r\n                mainFilter={{\r\n                    isDeleted: true,\r\n                    isPermanentlyDeleted: false\r\n                }}\r\n                onDelete={(item) => {\r\n                    item.deleted = true\r\n                    item.permanentlyDeleted = true\r\n                    updateItem(item)\r\n                }}\r\n                EmptyListComponent={\r\n                    <EmptyList/>\r\n                }\r\n            />\r\n        </Content>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Content from \"../components/Content\";\r\nimport {MainList} from \"../components/MainItem/MainList\";\r\nimport CreateFab from \"../components/commons/CreateFab\";\r\nimport EmptyList from \"../components/EmptyList\";\r\n\r\nexport default function Archive() {\r\n    return (\r\n        <Content>\r\n            <MainList\r\n                mainFilter={{\r\n                    isDeleted: false,\r\n                    isPermanentlyDeleted: false,\r\n                    isArchived: true\r\n                }}\r\n                EmptyListComponent={\r\n                    <EmptyList/>\r\n                }\r\n            />\r\n            <CreateFab/>\r\n        </Content>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport {createStyles, Theme, useTheme} from '@material-ui/core/styles';\r\nimport {makeStyles, Switch, Typography} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    setting: {\r\n        display: 'flex',\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\"\r\n    }\r\n}))\r\n\r\nexport default function SettingsDialog(props: { open: boolean, setOpen: (open: boolean) => void }) {\r\n    const classes = useStyles()\r\n    const {open, setOpen} = props\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n                maxWidth={\"xs\"}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"responsive-dialog-title\">Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className={classes.setting}>\r\n                        <Typography>\r\n                            Use Pagination\r\n                        </Typography>\r\n                        <Switch\r\n\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {TransitionProps} from '@material-ui/core/transitions';\r\nimport useUser from \"../../../store/UserProvider\";\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport {signOut} from \"../../../utils/AuthHelper\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            position: 'relative',\r\n        },\r\n        title: {\r\n            marginLeft: theme.spacing(2),\r\n            flex: 1,\r\n        },\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            flexDirection: \"column\",\r\n            padding: theme.spacing(4)\r\n        },\r\n        userContainer: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            marginTop: theme.spacing(5)\r\n        },\r\n        infoContainer: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            marginLeft: theme.spacing(6)\r\n        },\r\n        userPhoto: {\r\n            width: \"6rem\",\r\n            height: \"6rem\"\r\n        },\r\n        userEmail: {\r\n            color: theme.palette.text.secondary\r\n        },\r\n        optionsContainer: {\r\n            marginTop: theme.spacing(10),\r\n            width: \"20rem\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n        }\r\n    }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ninterface AccountDialogProps {\r\n    open: boolean,\r\n    setOpen: (open: boolean) => void,\r\n}\r\n\r\nexport default function AccountDialog(props: AccountDialogProps) {\r\n    const classes = useStyles();\r\n    const {open, setOpen} = props;\r\n    const {user} = useUser()\r\n\r\n    return (\r\n        <Dialog fullScreen open={open} onClose={() => setOpen(false)} TransitionComponent={Transition}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={() => setOpen(false)} aria-label=\"close\">\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Account\r\n                    </Typography>\r\n                    {/*<Button autoFocus color=\"inherit\" onClick={()=>setOpen(false)}>*/}\r\n                    {/*    save*/}\r\n                    {/*</Button>*/}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.container}>\r\n                {\r\n                    user != null ? (\r\n                        <div className={classes.userContainer}>\r\n                            <Avatar\r\n                                alt={user.displayName}\r\n                                src={user.photoURL}\r\n                                className={classes.userPhoto}\r\n                            />\r\n                            <div className={classes.infoContainer}>\r\n                                <Typography variant={\"h3\"}>\r\n                                    {user.displayName}\r\n                                </Typography>\r\n                                <Typography variant={\"h6\"} className={classes.userEmail}>\r\n                                    {user.email}\r\n                                </Typography>\r\n                            </div>\r\n\r\n                        </div>\r\n                    ) : null\r\n                }\r\n                <div className={classes.optionsContainer}>\r\n                    <Button variant={\"outlined\"} onClick={() => {\r\n                        signOut()\r\n                        setOpen(false)\r\n                    }}>\r\n                        Signout\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport Main from \"./ui/screens/Main\";\r\n\r\nimport {User, UserProvider} from \"./store/UserProvider\";\r\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core\";\r\nimport {dark, light, ThemeType} from \"./ui/Themes\";\r\nimport Header from \"./ui/components/Header\";\r\nimport SideDrawer from \"./ui/components/SideDrawer\";\r\nimport Container from \"./ui/components/Container\";\r\nimport {initClient} from \"./utils/AuthHelper\";\r\nimport {onAuthStateChanged} from \"./utils/FirebaseHelper\";\r\nimport {StorageProvider} from \"./store/StorageProvider\";\r\nimport NoteEditor from \"./ui/screens/NoteEditor/NoteEditor\";\r\nimport {Note} from \"./model/Note\";\r\nimport {getAllNotes} from \"./model/database/NoteDao\";\r\nimport {AppStateProvider} from \"./store/AppStateProvider\";\r\nimport Reminders from \"./ui/screens/Reminders\";\r\nimport Tags from \"./ui/screens/Tags\";\r\nimport Categories from \"./ui/screens/Categories\";\r\nimport Trash from \"./ui/screens/Trash\";\r\nimport {MindMap} from \"./model/MindMap\";\r\nimport {Reminder} from \"./model/Reminder\";\r\nimport {Category} from \"./model/Category\";\r\nimport {Tag} from \"./model/Tag\";\r\nimport {getAllMindMaps} from \"./model/database/MindMapDao\";\r\nimport {getAllReminders} from \"./model/database/ReminderDao\";\r\nimport {getAllCategories} from \"./model/database/CategoryDao\";\r\nimport {getAllTags} from \"./model/database/TagDao\";\r\nimport Archive from \"./ui/screens/Archive\";\r\nimport SettingsDialog from \"./ui/components/dialogs/SettingsDialog\";\r\nimport Cookies from \"js-cookie\"\r\nimport AccountDialog from \"./ui/components/dialogs/AccountDialog\";\r\nimport {sortRemindersList} from \"./utils/ReminderHelper\";\r\n\r\ntype AppPropsType = {}\r\n\r\ntype AppStateType = {\r\n    user: User | null,\r\n    storage: {\r\n        notes: Array<Note>,\r\n        mindmaps: Array<MindMap>,\r\n        reminders: Array<Reminder>,\r\n        categories: Array<Category>,\r\n        tags: Array<Tag>\r\n    },\r\n    appState: {\r\n        themeType: ThemeType,\r\n        drawerOpen: boolean,\r\n        settingsOpen: boolean,\r\n        accountOpen: boolean\r\n    }\r\n}\r\n\r\nclass App extends React.Component<AppPropsType, AppStateType> {\r\n\r\n    getSavedTheme = () => {\r\n        let saved = Cookies.get(\"theme\")\r\n        if (saved != null) {\r\n            return saved as ThemeType\r\n        } else {\r\n            return ThemeType.Light\r\n        }\r\n    }\r\n\r\n    state = {\r\n        user: null,\r\n        storage: {\r\n            notes: [],\r\n            mindmaps: [],\r\n            reminders: [],\r\n            categories: [],\r\n            tags: []\r\n        },\r\n        appState: {\r\n            themeType: this.getSavedTheme(),\r\n            drawerOpen: false,\r\n            settingsOpen: false,\r\n            accountOpen: false,\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Setups up GAPI Script Tag , Appends it to body and initializes client\r\n     */\r\n    setupGapi = () => {\r\n        const script = document.createElement(\"script\");\r\n        script.setAttribute(\"async\", \"async\");\r\n        script.setAttribute(\"defer\", \"defer\");\r\n        script.src = \"https://apis.google.com/js/api.js\";\r\n        script.onload = () => {\r\n            if (window.gapi) {\r\n                try {\r\n                    window.gapi.load(\"client:auth2\", initClient);\r\n                } catch (exception) {\r\n                    console.log(exception);\r\n                }\r\n            }\r\n        };\r\n        document.body.appendChild(script);\r\n    }\r\n\r\n    //User State Functions\r\n    setUser = (user: User | null) => {\r\n        this.setState({\r\n            user\r\n        })\r\n    }\r\n\r\n    //App State Functions\r\n    setThemeType = (themeType: ThemeType) => {\r\n        this.setState({\r\n            appState: {\r\n                ...this.state.appState,\r\n                themeType\r\n            }\r\n        })\r\n        Cookies.set(\"theme\", themeType)\r\n    }\r\n\r\n    setDrawerOpen = (drawerOpen: boolean) => {\r\n        this.setState({\r\n            appState: {\r\n                ...this.state.appState,\r\n                drawerOpen\r\n            }\r\n        })\r\n    }\r\n\r\n    setSettingsOpen = (settingsOpen: boolean) => {\r\n        this.setState({\r\n            appState: {\r\n                ...this.state.appState,\r\n                settingsOpen\r\n            }\r\n        })\r\n    }\r\n\r\n    setAccountOpen = (accountOpen: boolean) => {\r\n        this.setState({\r\n            appState: {\r\n                ...this.state.appState,\r\n                accountOpen\r\n            }\r\n        })\r\n    }\r\n\r\n    //Storage State Functions\r\n    initNotes = () => {\r\n        getAllNotes().then((notes: Array<Note>) => {\r\n            this.setState({\r\n                storage: {\r\n                    ...this.state.storage,\r\n                    notes: notes.filter((note: Note) => !note.permanentlyDeleted)\r\n                }\r\n            })\r\n        })\r\n    }\r\n    initMindMaps = () => {\r\n        getAllMindMaps().then((mindmaps: Array<MindMap>) => {\r\n            this.setState({\r\n                storage: {\r\n                    ...this.state.storage,\r\n                    mindmaps: mindmaps.filter((mindmap: MindMap) => !mindmap.permanentlyDeleted)\r\n                }\r\n            })\r\n        })\r\n    }\r\n    initReminders = () => {\r\n        getAllReminders().then((reminders: Array<Reminder>) => {\r\n            this.setState({\r\n                storage: {\r\n                    ...this.state.storage,\r\n                    reminders: sortRemindersList(reminders.filter((reminder: Reminder) => !reminder.deleted\r\n                    ))\r\n                }\r\n            })\r\n        })\r\n    }\r\n    initCategories = () => {\r\n        getAllCategories().then((categories: Array<Category>) => {\r\n            this.setState({\r\n                storage: {\r\n                    ...this.state.storage,\r\n                    categories: categories.filter((category: Category) => !category.deleted).reverse()\r\n                }\r\n            })\r\n        })\r\n    }\r\n    initTags = () => {\r\n        getAllTags().then((tags: Array<Tag>) => {\r\n            this.setState({\r\n                storage: {\r\n                    ...this.state.storage,\r\n                    tags: tags.filter((tag: Tag) => !tag.deleted).reverse()\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //Setting Up Authentication\r\n        onAuthStateChanged((user) => {\r\n            this.setState({\r\n                user,\r\n            });\r\n        });\r\n        this.setupGapi();\r\n\r\n        //Setting Up Storage\r\n        this.initNotes()\r\n        this.initMindMaps()\r\n        this.initReminders()\r\n        this.initCategories()\r\n        this.initTags()\r\n    }\r\n\r\n    render() {\r\n\r\n        let theme\r\n        if (this.state.appState.themeType === ThemeType.Dark) {\r\n            theme = createMuiTheme(dark)\r\n        } else {\r\n            theme = createMuiTheme(light)\r\n        }\r\n\r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <UserProvider user={{user: this.state.user, setUser: this.setUser}}>\r\n                    <StorageProvider storage={{\r\n                        ...this.state.storage,\r\n                        initNotes: this.initNotes,\r\n                        initMindMaps: this.initMindMaps,\r\n                        initReminders: this.initReminders,\r\n                        initCategories: this.initCategories,\r\n                        initTags: this.initTags\r\n                    }}>\r\n                        <AppStateProvider\r\n                            state={{\r\n                                themeType: this.state.appState.themeType,\r\n                                setThemeType: this.setThemeType,\r\n                                drawerOpen: this.state.appState.drawerOpen,\r\n                                setDrawerOpen: this.setDrawerOpen,\r\n                                settingsOpen: this.state.appState.settingsOpen,\r\n                                setSettingsOpen: this.setSettingsOpen,\r\n                                accountOpen: this.state.appState.accountOpen,\r\n                                setAccountOpen: this.setAccountOpen,\r\n                            }}>\r\n                            <HashRouter>\r\n                                <Container className={theme.palette.type}>\r\n                                    <Header/>\r\n                                    <SideDrawer/>\r\n                                    <Switch>\r\n                                        <Route path=\"/note/:id?\">\r\n                                            <NoteEditor/>\r\n                                        </Route>\r\n                                        <Route path={\"/reminders\"}>\r\n                                            <Reminders/>\r\n                                        </Route>\r\n                                        <Route path={\"/categories\"}>\r\n                                            <Categories/>\r\n                                        </Route>\r\n                                        <Route path={\"/tags\"}>\r\n                                            <Tags/>\r\n                                        </Route>\r\n                                        <Route path={\"/archive\"}>\r\n                                            <Archive/>\r\n                                        </Route>\r\n                                        <Route path={\"/trash\"}>\r\n                                            <Trash/>\r\n                                        </Route>\r\n                                        <Route path=\"/\">\r\n                                            <Main/>\r\n                                        </Route>\r\n                                    </Switch>\r\n\r\n                                    {/*    Dialods    */}\r\n                                    <AccountDialog\r\n                                        open={this.state.appState.accountOpen}\r\n                                        setOpen={this.setAccountOpen}\r\n                                    />\r\n                                    <SettingsDialog\r\n                                        open={this.state.appState.settingsOpen}\r\n                                        setOpen={this.setSettingsOpen}\r\n                                    />\r\n                                </Container>\r\n                            </HashRouter>\r\n                        </AppStateProvider>\r\n                    </StorageProvider>\r\n                </UserProvider>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}